{
  "version": 3,
  "sources": ["../../src/components/header.ts", "../../src/types.ts", "../../src/utils/format.ts", "../../src/utils/highlight.ts", "../../src/utils/query.ts", "../../src/components/searchDialog.ts", "../../src/config/defaults.json", "../../src/state/store.ts", "../../src/state/settingsStore.ts", "../../src/components/resultsView.ts", "../../src/components/settingsView.ts", "../../src/state/appState.ts", "../../src/data/searchService.ts", "../../src/main.ts"],
  "sourcesContent": ["import { ScreenRoute } from '../types';\n\nexport interface HeaderOptions {\n  onNavigate(route: ScreenRoute): void;\n  onHome(): void;\n  onSearchChange(value: string): void;\n  onSearchSubmit(): void;\n  onSearchFocus?(): void;\n  onSearchBlur?(): void;\n  onSearchKeyDown?(event: KeyboardEvent): void;\n}\n\nexport interface HeaderHandles {\n  element: HTMLElement;\n  searchInput: HTMLInputElement;\n  dialogHost: HTMLDivElement;\n  setActiveRoute(route: ScreenRoute): void;\n  setMonetarySearchMode(isMonetary: boolean): void;\n}\n\nexport function createHeader(options: HeaderOptions): HeaderHandles {\n  const header = document.createElement('header');\n  header.className = 'app-header';\n\n  const nav = document.createElement('nav');\n  nav.className = 'app-nav';\n\n  const brand = document.createElement('div');\n  brand.className = 'brand';\n\n  const searchArea = document.createElement('div');\n  searchArea.className = 'search-area';\n\n  const searchForm = document.createElement('form');\n  searchForm.className = 'search-form';\n  searchForm.setAttribute('role', 'search');\n\n  const searchInput = document.createElement('input');\n  searchInput.type = 'search';\n  searchInput.name = 'global-search';\n  searchInput.id = 'global-search';\n  searchInput.placeholder = 'Search projects, invoices, documents\u2026';\n  searchInput.autocomplete = 'off';\n\n  const dialogHost = document.createElement('div');\n  dialogHost.className = 'search-dialog-host';\n\n  searchForm.append(searchInput);\n  searchArea.append(searchForm, dialogHost);\n\n  const navActions = document.createElement('div');\n  navActions.className = 'nav-actions';\n\n  const homeButton = document.createElement('button');\n  homeButton.type = 'button';\n  homeButton.className = 'home-button';\n  homeButton.textContent = 'Home';\n\n  const resultsButton = document.createElement('button');\n  resultsButton.type = 'button';\n  resultsButton.dataset.route = 'results';\n  resultsButton.textContent = 'Results';\n\n  const settingsButton = document.createElement('button');\n  settingsButton.type = 'button';\n  settingsButton.dataset.route = 'settings';\n  settingsButton.textContent = 'Settings';\n\n  navActions.append(homeButton, resultsButton, settingsButton);\n  nav.append(brand, searchArea, navActions);\n  header.append(nav);\n\n  searchInput.addEventListener('input', () => {\n    options.onSearchChange(searchInput.value);\n  });\n\n  searchInput.addEventListener('focus', () => {\n    options.onSearchFocus?.();\n  });\n\n  searchInput.addEventListener('blur', () => {\n    options.onSearchBlur?.();\n  });\n\n  searchInput.addEventListener('keydown', (event) => {\n    options.onSearchKeyDown?.(event);\n  });\n\n  searchForm.addEventListener('submit', (event) => {\n    event.preventDefault();\n    options.onSearchSubmit();\n  });\n\n  homeButton.addEventListener('click', () => {\n    options.onHome();\n  });\n\n  navActions.addEventListener('click', (event) => {\n    const target = event.target as HTMLElement;\n    if (!(target instanceof HTMLButtonElement)) {\n      return;\n    }\n\n    const route = target.dataset.route as ScreenRoute | undefined;\n    if (!route) {\n      return;\n    }\n\n    options.onNavigate(route);\n  });\n\n  const setActiveRoute = (route: ScreenRoute) => {\n    // Handle Home button\n    const isHomeActive = route === 'home';\n    homeButton.classList.toggle('is-active', isHomeActive);\n    homeButton.setAttribute('aria-pressed', String(isHomeActive));\n\n    // Handle other navigation buttons\n    for (const button of navActions.querySelectorAll<HTMLButtonElement>('button[data-route]')) {\n      const isActive = button.dataset.route === route;\n      button.classList.toggle('is-active', isActive);\n      button.setAttribute('aria-pressed', String(isActive));\n    }\n  };\n\n  const setMonetarySearchMode = (isMonetary: boolean) => {\n    searchForm.classList.toggle('monetary-search', isMonetary);\n    searchInput.classList.toggle('monetary-search', isMonetary);\n  };\n\n  return {\n    element: header,\n    searchInput,\n    dialogHost,\n    setActiveRoute,\n    setMonetarySearchMode,\n  };\n}\n", "export type SearchEntityType =\n  | 'Document'\n  | 'ClientInvoice'\n  | 'PurchaseOrder'\n  | 'Bill'\n  | 'Receipt'\n  | 'Payment'\n  | 'Person'\n  | 'Organization';\n\nexport type LineItemType = 'Labor' | 'Material' | 'Subcontractor' | 'Other';\n\nexport interface LineItem {\n  lineItemId: string;\n  lineItemTitle: string;\n  lineItemDescription: string;\n  lineItemQuantity: number;\n  lineItemQuantityUnitOfMeasure: string;\n  lineItemUnitPrice: number;\n  lineItemTotal: number;\n  lineItemType: LineItemType;\n}\n\nexport interface SearchRecordBase {\n  id: string;\n  entityType: SearchEntityType;\n  title: string;\n  summary: string;\n  project: string;\n  client: string;\n  status: string;\n  updatedAt: string;\n  tags: string[];\n  metadata: Record<string, string | number | boolean | null>;\n}\n\nexport interface DocumentRecord extends SearchRecordBase {\n  entityType: 'Document';\n  documentType: string;\n  author: string;\n}\n\nexport interface FinancialRecord extends SearchRecordBase {\n  entityType: 'ClientInvoice' | 'PurchaseOrder' | 'Bill' | 'Receipt' | 'Payment';\n  totalValue: number;\n  issuedDate: string;\n  dueDate?: string;\n  lineItems: LineItem[];\n}\n\nexport type PersonType = 'Client' | 'Contact';\n\nexport interface PersonRecord extends SearchRecordBase {\n  entityType: 'Person';\n  personType: PersonType;\n  jobTitle: string;\n  associatedOrganization?: string;\n  email: string;\n  phone: string;\n  location: string;\n  tradeFocus?: string;\n}\n\nexport type OrganizationType = 'Subcontractor' | 'Vendor';\n\nexport interface OrganizationRecord extends SearchRecordBase {\n  entityType: 'Organization';\n  organizationType: OrganizationType;\n  tradeFocus: string;\n  serviceArea: string;\n  primaryContact: string;\n  phone: string;\n  email: string;\n  website?: string;\n}\n\nexport type SearchRecord =\n  | DocumentRecord\n  | FinancialRecord\n  | PersonRecord\n  | OrganizationRecord;\n\nexport function isFinancialRecord(record: SearchRecord): record is FinancialRecord {\n  return (\n    record.entityType === 'ClientInvoice' ||\n    record.entityType === 'PurchaseOrder' ||\n    record.entityType === 'Bill' ||\n    record.entityType === 'Receipt' ||\n    record.entityType === 'Payment'\n  );\n}\n\nexport function isPersonRecord(record: SearchRecord): record is PersonRecord {\n  return record.entityType === 'Person';\n}\n\nexport function isOrganizationRecord(record: SearchRecord): record is OrganizationRecord {\n  return record.entityType === 'Organization';\n}\n\nexport interface SearchGroup {\n  entityType: SearchEntityType;\n  items: SearchRecord[];\n  groupTitle?: string;\n}\n\nexport type FacetKey =\n  | 'entityType'\n  | 'project'\n  | 'status'\n  | 'documentType'\n  | 'client'\n  | 'issuedDate'\n  | 'totalValue'\n  | 'groupBy'\n  | 'personType'\n  | 'contactOrganization'\n  | 'organizationType'\n  | 'tradeFocus';\n\nexport interface FacetValue {\n  key: FacetKey;\n  value: string;\n  count: number;\n}\n\nexport interface FacetSelection {\n  key: FacetKey;\n  value: string;\n}\n\nexport interface SearchResponse {\n  query: string;\n  totalResults: number;\n  limitedGroups: SearchGroup[];\n  fullGroups: SearchGroup[];\n  facets: Partial<Record<FacetKey, FacetValue[]>>;\n  records: SearchRecord[];\n  isGrouped: boolean;\n}\n\nexport type ScreenRoute = 'home' | 'results' | 'settings';\n\nexport type FacetSelectionState = Partial<Record<FacetKey, Set<string>>>;\n\nexport interface SearchOptions {\n  query: string;\n  selections?: FacetSelectionState;\n  isMonetarySearch?: boolean;\n}\n", "import { SearchEntityType } from '../types';\n\nconst ENTITY_LABELS: Record<SearchEntityType, { singular: string; plural: string }> = {\n  Document: { singular: 'Document', plural: 'Documents' },\n  ClientInvoice: { singular: 'Client Invoice', plural: 'Client Invoices' },\n  PurchaseOrder: { singular: 'Purchase Order', plural: 'Purchase Orders' },\n  Bill: { singular: 'Bill', plural: 'Bills' },\n  Receipt: { singular: 'Receipt', plural: 'Receipts' },\n  Payment: { singular: 'Payment', plural: 'Payments' },\n  Person: { singular: 'Person', plural: 'People' },\n  Organization: { singular: 'Organization', plural: 'Organizations' },\n};\n\nexport function formatEntityType(type: SearchEntityType, options?: { plural?: boolean }): string {\n  const label = ENTITY_LABELS[type];\n  if (!label) {\n    return type;\n  }\n  return options?.plural ? label.plural : label.singular;\n}\n\nexport function formatCurrency(amount: number, currency: string = 'USD'): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\nexport function formatDate(value: string): string {\n  const date = new Date(value);\n  if (Number.isNaN(date.getTime())) {\n    return value;\n  }\n\n  return new Intl.DateTimeFormat('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n  }).format(date);\n}\n", "import { SearchRecord, isFinancialRecord, isOrganizationRecord, isPersonRecord } from '../types';\n\nexport interface HighlightMatch {\n  field: string;\n  content: string;\n  highlightedContent: string;\n}\n\n/**\n * Highlights matching text in a string with yellow background\n */\nexport function highlightText(text: string, query: string): string {\n  if (!query.trim()) {\n    return escapeHtml(text);\n  }\n\n  const tokens = query.toLowerCase().split(/\\s+/).filter(Boolean);\n  if (tokens.length === 0) {\n    return escapeHtml(text);\n  }\n\n  let highlightedText = escapeHtml(text);\n  const textLower = text.toLowerCase();\n\n  // Sort tokens by length (longest first) to avoid partial highlighting\n  const sortedTokens = [...tokens].sort((a, b) => b.length - a.length);\n\n  for (const token of sortedTokens) {\n    if (!textLower.includes(token)) {\n      continue;\n    }\n\n    // Create a case-insensitive regex that preserves original case\n    const regex = new RegExp(`(${escapeRegex(token)})`, 'gi');\n    highlightedText = highlightedText.replace(regex, '<mark class=\"search-highlight\">$1</mark>');\n  }\n\n  return highlightedText;\n}\n\n/**\n * Finds the best matching field and content for a search record\n */\nexport function findBestMatch(record: SearchRecord, query: string): HighlightMatch | null {\n  if (!query.trim()) {\n    return null;\n  }\n\n  const tokens = query.toLowerCase().split(/\\s+/).filter(Boolean);\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  // Define searchable fields with their content\n  const searchableFields: Array<{ field: string; content: string }> = [\n    { field: 'title', content: record.title },\n    { field: 'summary', content: record.summary },\n    { field: 'project', content: record.project },\n    { field: 'client', content: record.client },\n    { field: 'status', content: record.status },\n    { field: 'tags', content: record.tags.join(' ') },\n  ];\n\n  // Add document-specific fields\n  if (record.entityType === 'Document') {\n    const docRecord = record as any;\n    if (docRecord.documentType) {\n      searchableFields.push({ field: 'documentType', content: docRecord.documentType });\n    }\n    if (docRecord.author) {\n      searchableFields.push({ field: 'author', content: docRecord.author });\n    }\n  }\n\n  if (isPersonRecord(record)) {\n    searchableFields.push(\n      { field: 'personType', content: record.personType },\n      { field: 'jobTitle', content: record.jobTitle },\n      { field: 'organization', content: record.associatedOrganization ?? '' },\n      { field: 'email', content: record.email },\n      { field: 'phone', content: record.phone },\n      { field: 'location', content: record.location },\n      { field: 'tradeFocus', content: record.tradeFocus ?? '' },\n    );\n  } else if (isOrganizationRecord(record)) {\n    searchableFields.push(\n      { field: 'organizationType', content: record.organizationType },\n      { field: 'tradeFocus', content: record.tradeFocus },\n      { field: 'serviceArea', content: record.serviceArea },\n      { field: 'primaryContact', content: record.primaryContact },\n      { field: 'phone', content: record.phone },\n      { field: 'email', content: record.email },\n      { field: 'website', content: record.website ?? '' },\n    );\n  } else if (isFinancialRecord(record)) {\n    if (record.lineItems) {\n      record.lineItems.forEach((item, index) => {\n        searchableFields.push(\n          { field: `lineItem${index}_title`, content: item.lineItemTitle },\n          { field: `lineItem${index}_description`, content: item.lineItemDescription },\n          { field: `lineItem${index}_type`, content: item.lineItemType }\n        );\n      });\n    }\n  }\n\n  // Add metadata fields\n  Object.entries(record.metadata || {}).forEach(([key, value]) => {\n    if (value != null) {\n      searchableFields.push({ field: `metadata_${key}`, content: String(value) });\n    }\n  });\n\n  // Find the field with the most token matches\n  let bestMatch: HighlightMatch | null = null;\n  let bestScore = 0;\n\n  for (const { field, content } of searchableFields) {\n    if (!content) continue;\n\n    const contentLower = content.toLowerCase();\n    const matchingTokens = tokens.filter(token => contentLower.includes(token));\n    const score = matchingTokens.length;\n\n    if (score > bestScore) {\n      bestMatch = {\n        field,\n        content,\n        highlightedContent: highlightText(content, query)\n      };\n      bestScore = score;\n    }\n  }\n\n  return bestMatch;\n}\n\n/**\n * Gets a context snippet from the best matching field\n */\nexport function getContextSnippet(match: HighlightMatch, maxLength: number = 100, query?: string): string {\n  if (!match) return '';\n\n  const content = match.content;\n  if (content.length <= maxLength) {\n    return match.highlightedContent;\n  }\n\n  // Try to find a good snippet around the first match\n  const tokens = content.toLowerCase().split(/\\s+/);\n  const queryTokens = query ? query.toLowerCase().split(/\\s+/) : [];\n  \n  // Find the first token that matches any query token\n  let startIndex = 0;\n  for (let i = 0; i < tokens.length; i++) {\n    if (queryTokens.some(qt => tokens[i].includes(qt))) {\n      startIndex = Math.max(0, i - 2); // Start 2 words before the match\n      break;\n    }\n  }\n\n  const words = content.split(/\\s+/);\n  const snippet = words.slice(startIndex, startIndex + Math.ceil(maxLength / 8)).join(' ');\n  \n  if (snippet.length < content.length) {\n    return highlightText(snippet + '...', query || '');\n  }\n  \n  return match.highlightedContent;\n}\n\n/**\n * Escapes HTML special characters\n */\nfunction escapeHtml(text: string): string {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n/**\n * Hybrid highlighting that combines regular text highlighting with monetary value highlighting\n * This is used for queries that have both text and monetary potential (like \"123\")\n */\nexport function highlightHybrid(text: string, query: string): string {\n  if (!query.trim()) {\n    return escapeHtml(text);\n  }\n\n  // Start with escaped HTML\n  let highlightedText = escapeHtml(text);\n  const textLower = text.toLowerCase();\n  const tokens = query.toLowerCase().split(/\\s+/).filter(Boolean);\n  \n  // Apply regular text highlighting (yellow) first\n  if (tokens.length > 0) {\n    const sortedTokens = [...tokens].sort((a, b) => b.length - a.length);\n    \n    for (const token of sortedTokens) {\n      if (!textLower.includes(token)) {\n        continue;\n      }\n      \n      // Create a case-insensitive regex that preserves original case\n      const regex = new RegExp(`(${escapeRegex(token)})`, 'gi');\n      highlightedText = highlightedText.replace(regex, '<mark class=\"search-highlight\">$1</mark>');\n    }\n  }\n  \n  // Then apply monetary highlighting (green) on top\n  // This will highlight monetary values even if they weren't caught by text highlighting\n  const { amounts, textTokens, range } = extractMonetaryTokens(query);\n  \n  if (amounts.length > 0 || textTokens.length > 0 || range) {\n    // Apply monetary highlighting logic directly to avoid double-escaping\n    if (amounts.length > 0) {\n      // For explicit monetary searches (queries starting with $), be more restrictive\n      const isExplicitMonetary = query.trim().startsWith('$');\n      \n      for (const amount of amounts) {\n        const amountStr = amount.toString();\n        const amountWithCommas = amount.toLocaleString();\n        \n        if (isExplicitMonetary) {\n          // For explicit monetary searches, only highlight values that are clearly monetary\n          const monetaryPattern = new RegExp(\n            `(\\\\$\\\\b${escapeRegex(amountWithCommas)}\\\\b|\\\\$\\\\b${escapeRegex(amountStr)}\\\\b)`,\n            'g'\n          );\n          \n          highlightedText = highlightedText.replace(monetaryPattern, '<mark class=\"monetary-highlight\">$1</mark>');\n        } else {\n          // For non-explicit monetary searches, use the original broader pattern\n          const pattern = new RegExp(\n            `(\\\\$?\\\\b${escapeRegex(amountWithCommas)}\\\\b|\\\\$?\\\\b${escapeRegex(amountStr)}\\\\b)`,\n            'g'\n          );\n          \n          highlightedText = highlightedText.replace(pattern, '<mark class=\"monetary-highlight\">$1</mark>');\n        }\n      }\n    }\n    \n    // Handle range highlighting\n    if (range) {\n      const rangePatterns = [\n        new RegExp(`\\\\b${escapeRegex(range.min.toString())}\\\\s*-\\\\s*${escapeRegex(range.max.toString())}\\\\b`, 'g'),\n        new RegExp(`\\\\b${escapeRegex(range.min.toString())}\\\\s+to\\\\s+${escapeRegex(range.max.toString())}\\\\b`, 'gi'),\n        new RegExp(`\\\\b${escapeRegex(range.min.toString())}\\\\b`, 'g'),\n        new RegExp(`\\\\b${escapeRegex(range.max.toString())}\\\\b`, 'g'),\n      ];\n      \n      for (const pattern of rangePatterns) {\n        highlightedText = highlightedText.replace(pattern, '<mark class=\"monetary-highlight\">$&</mark>');\n      }\n    }\n    \n    // Handle text tokens\n    if (textTokens.length > 0) {\n      for (const token of textTokens) {\n        const regex = new RegExp(`(${escapeRegex(token)})`, 'gi');\n        highlightedText = highlightedText.replace(regex, '<mark class=\"monetary-highlight\">$1</mark>');\n      }\n    }\n  }\n  \n  return highlightedText;\n}\n\n/**\n * Highlights matching numeric values in monetary search mode with light green background\n */\nexport function highlightMonetaryValues(text: string, query: string): string {\n  if (!query.trim()) {\n    return escapeHtml(text);\n  }\n\n  const { amounts, textTokens, range } = extractMonetaryTokens(query);\n  \n  if (amounts.length === 0 && textTokens.length === 0 && !range) {\n    return escapeHtml(text);\n  }\n\n  let highlightedText = escapeHtml(text);\n  \n  // For explicit monetary searches (queries starting with $), be more restrictive\n  const isExplicitMonetary = query.trim().startsWith('$');\n  \n  // Highlight numeric values that match the query amounts\n  if (amounts.length > 0) {\n    for (const amount of amounts) {\n      // Create a single comprehensive pattern that matches the amount in various formats\n      // This avoids double highlighting by using a single replacement\n      const amountStr = amount.toString();\n      const amountWithCommas = amount.toLocaleString();\n      \n      if (isExplicitMonetary) {\n        // For explicit monetary searches, only highlight values that are clearly monetary\n        // Look for patterns that indicate monetary values: $X, $X,XXX, $X.XX, etc.\n        const monetaryPattern = new RegExp(\n          `(\\\\$\\\\b${escapeRegex(amountWithCommas)}\\\\b|\\\\$\\\\b${escapeRegex(amountStr)}\\\\b)`,\n          'g'\n        );\n        \n        highlightedText = highlightedText.replace(monetaryPattern, '<mark class=\"monetary-highlight\">$1</mark>');\n      } else {\n        // For non-explicit monetary searches, use the original broader pattern\n        const pattern = new RegExp(\n          `(\\\\$?\\\\b${escapeRegex(amountWithCommas)}\\\\b|\\\\$?\\\\b${escapeRegex(amountStr)}\\\\b)`,\n          'g'\n        );\n        \n        highlightedText = highlightedText.replace(pattern, '<mark class=\"monetary-highlight\">$1</mark>');\n      }\n    }\n    \n    if (!isExplicitMonetary) {\n      // Additionally, handle partial matches for monetary values (only for non-explicit searches)\n      // This handles cases like searching for \"127\" and highlighting \"$1,275\"\n      const monetaryValuePattern = /\\$?[\\d,]+(?:\\.\\d{2})?/g;\n      highlightedText = highlightedText.replace(monetaryValuePattern, (match) => {\n        // Only process if not already highlighted\n        if (match.includes('<mark')) {\n          return match;\n        }\n        \n        // Extract the numeric value from the match\n        const numericValue = parseFloat(match.replace(/[$,\\s]/g, ''));\n        \n        // Check if any query amount is a partial match of this value\n        for (const queryAmount of amounts) {\n          if (isPartialMonetaryMatch(queryAmount, numericValue)) {\n            return `<mark class=\"monetary-highlight\">${match}</mark>`;\n          }\n        }\n        \n        return match;\n      });\n    }\n  }\n  \n  // Highlight range values if it's a range query\n  if (range) {\n    // First, highlight the range pattern itself in the text\n    const rangePatterns = [\n      // Range format: min-max\n      new RegExp(`\\\\b${escapeRegex(range.min.toString())}\\\\s*-\\\\s*${escapeRegex(range.max.toString())}\\\\b`, 'g'),\n      // Range format: min to max\n      new RegExp(`\\\\b${escapeRegex(range.min.toString())}\\\\s+to\\\\s+${escapeRegex(range.max.toString())}\\\\b`, 'gi'),\n      // Individual range values\n      new RegExp(`\\\\b${escapeRegex(range.min.toString())}\\\\b`, 'g'),\n      new RegExp(`\\\\b${escapeRegex(range.max.toString())}\\\\b`, 'g'),\n    ];\n    \n    for (const pattern of rangePatterns) {\n      highlightedText = highlightedText.replace(pattern, '<mark class=\"monetary-highlight\">$&</mark>');\n    }\n    \n    // Additionally, highlight any monetary values in the text that fall within the range\n    // This handles cases where the displayed value (like $31,344) falls within the range ($30000-40000)\n    const monetaryValuePattern = /\\$?[\\d,]+(?:\\.\\d{2})?/g;\n    highlightedText = highlightedText.replace(monetaryValuePattern, (match) => {\n      // Extract the numeric value from the match\n      const numericValue = parseFloat(match.replace(/[$,\\s]/g, ''));\n      \n      // Check if this value falls within the range\n      if (!isNaN(numericValue) && numericValue >= range.min && numericValue <= range.max) {\n        // Only highlight if it's not already highlighted\n        if (!match.includes('<mark')) {\n          return `<mark class=\"monetary-highlight\">${match}</mark>`;\n        }\n      }\n      \n      return match;\n    });\n  }\n  \n  // Also highlight any text tokens that match\n  if (textTokens.length > 0) {\n    for (const token of textTokens) {\n      const regex = new RegExp(`(${escapeRegex(token)})`, 'gi');\n      highlightedText = highlightedText.replace(regex, '<mark class=\"monetary-highlight\">$1</mark>');\n    }\n  }\n  \n  return highlightedText;\n}\n\n/**\n * Extracts monetary tokens from a query (reused from searchService.ts logic)\n */\nfunction extractMonetaryTokens(query: string): { amounts: number[]; textTokens: string[]; range: { min: number; max: number } | null } {\n  const tokens = query.toLowerCase().split(/\\s+/).filter(Boolean);\n  const amounts: number[] = [];\n  const textTokens: string[] = [];\n  \n  // Check for range query first\n  const range = parseRangeQuery(query);\n  if (range) {\n    return { amounts, textTokens, range };\n  }\n  \n  for (const token of tokens) {\n    const parsed = parseCurrencyString(token);\n    if (parsed !== null) {\n      amounts.push(parsed);\n    } else {\n      textTokens.push(token);\n    }\n  }\n  \n  return { amounts, textTokens, range: null };\n}\n\n/**\n * Parses currency string to extract numeric value\n */\nfunction parseCurrencyString(amountStr: string): number | null {\n  // Remove currency symbols, commas, and whitespace\n  const cleaned = amountStr.replace(/[$,\\s]/g, '');\n  \n  // Handle range queries (e.g., \"100-200\", \"100 to 200\")\n  if (cleaned.includes('-') || cleaned.toLowerCase().includes(' to ')) {\n    return null; // Will be handled separately\n  }\n  \n  const parsed = parseFloat(cleaned);\n  return isNaN(parsed) ? null : parsed;\n}\n\n/**\n * Parses range query from string\n */\nfunction parseRangeQuery(query: string): { min: number; max: number } | null {\n  // Handle various range formats: \"100-200\", \"100 to 200\", \"$100-$200\", \"$100 to $200\"\n  const rangePatterns = [\n    /(\\d+(?:\\.\\d+)?)\\s*-\\s*(\\d+(?:\\.\\d+)?)/,  // 100-200\n    /(\\d+(?:\\.\\d+)?)\\s+to\\s+(\\d+(?:\\.\\d+)?)/i, // 100 to 200\n    /\\$(\\d+(?:\\.\\d+)?)\\s*-\\s*\\$(\\d+(?:\\.\\d+)?)/, // $100-$200\n    /\\$(\\d+(?:\\.\\d+)?)\\s+to\\s+\\$(\\d+(?:\\.\\d+)?)/i, // $100 to $200\n  ];\n  \n  for (const pattern of rangePatterns) {\n    const match = query.match(pattern);\n    if (match) {\n      const min = parseFloat(match[1]);\n      const max = parseFloat(match[2]);\n      if (!isNaN(min) && !isNaN(max) && min <= max) {\n        return { min, max };\n      }\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Escapes regex special characters\n */\nfunction escapeRegex(text: string): string {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n/**\n * Checks if a query amount is a partial match of a data value\n * This handles cases like searching for \"$127\" and matching \"$1,275\"\n */\nfunction isPartialMonetaryMatch(queryAmount: number, dataValue: number): boolean {\n  // Convert both to strings for comparison\n  const queryStr = queryAmount.toString();\n  const dataStr = dataValue.toString();\n  \n  // Check if the query amount appears at the start of the data value\n  // This handles cases like 127 matching 1275, but not 127 matching 3127\n  if (dataStr.startsWith(queryStr)) {\n    return true;\n  }\n  \n  // Also check if the query amount appears at the start when we remove trailing zeros\n  // This handles cases like 127 matching 1270\n  const dataWithoutTrailingZeros = dataStr.replace(/0+$/, '');\n  if (dataWithoutTrailingZeros.startsWith(queryStr)) {\n    return true;\n  }\n  \n  return false;\n}\n", "export const MIN_EFFECTIVE_QUERY_LENGTH = 2;\n\n/**\n * Calculates the number of characters that should count toward the search length\n * requirement. We ignore whitespace so people cannot satisfy the minimum with\n * a space, and we ignore the dollar sign because monetary searches always\n * begin with it.\n */\nexport function getEffectiveQueryLength(query: string): number {\n  if (!query) {\n    return 0;\n  }\n\n  return query\n    .replace(/\\$/g, '')\n    .replace(/\\s+/g, '')\n    .length;\n}\n\nexport function isQueryTooShort(query: string): boolean {\n  const effectiveLength = getEffectiveQueryLength(query);\n  return effectiveLength > 0 && effectiveLength < MIN_EFFECTIVE_QUERY_LENGTH;\n}\n", "import {\n  SearchGroup,\n  SearchRecord,\n  SearchResponse,\n  isFinancialRecord,\n  isOrganizationRecord,\n  isPersonRecord,\n} from '../types';\nimport { formatCurrency, formatDate, formatEntityType } from '../utils/format';\nimport { SearchStatus } from '../state/appState';\nimport { findBestMatch, getContextSnippet, highlightText, highlightMonetaryValues, highlightHybrid } from '../utils/highlight';\nimport { getEffectiveQueryLength, isQueryTooShort, MIN_EFFECTIVE_QUERY_LENGTH } from '../utils/query';\n\n// Helper function to detect if a query has monetary potential (for hybrid highlighting)\nfunction hasMonetaryPotential(query: string): boolean {\n  const tokens = query.toLowerCase().split(/\\s+/).filter(Boolean);\n  return tokens.some(token => {\n    return /^\\d+(,\\d{3})*(\\.\\d+)?$/.test(token) || \n           /^\\d+(\\.\\d+)?$/.test(token) ||\n           /^\\$?\\d+(,\\d{3})*(\\.\\d+)?$/.test(token) ||\n           /\\d/.test(token); // Any token containing a digit\n  });\n}\n\n// Helper function to determine which highlighting function to use\nfunction getHighlightFunction(query: string, isMonetarySearch: boolean) {\n  if (isMonetarySearch) {\n    return highlightMonetaryValues;\n  } else if (hasMonetaryPotential(query)) {\n    return highlightHybrid;\n  } else {\n    return highlightText;\n  }\n}\n\nexport interface SearchDialogState {\n  visible: boolean;\n  status: SearchStatus;\n  query: string;\n  response: SearchResponse | null;\n  isMonetarySearch?: boolean;\n}\n\nexport interface SearchDialogOptions {\n  onSeeAllResults(): void;\n}\n\nexport interface SearchDialogHandles {\n  element: HTMLDivElement;\n  setState(state: SearchDialogState): void;\n}\n\nexport function createSearchDialog(\n  host: HTMLDivElement,\n  options: SearchDialogOptions,\n): SearchDialogHandles {\n  const dialog = document.createElement('div');\n  dialog.className = 'search-dialog';\n  dialog.setAttribute('role', 'dialog');\n  dialog.setAttribute('aria-modal', 'false');\n  dialog.hidden = true;\n\n  host.append(dialog);\n\n  // Track previous state to avoid unnecessary re-renders\n  let previousState: SearchDialogState | null = null;\n\n  const setState = (state: SearchDialogState) => {\n    // Only update visibility if it changed\n    const visibilityChanged = !previousState || previousState.visible !== state.visible;\n    if (visibilityChanged) {\n      dialog.hidden = !state.visible;\n      if (dialog.hidden) {\n        dialog.innerHTML = '';\n        dialog.style.display = 'none';\n        previousState = state;\n        return;\n      }\n      dialog.style.display = 'flex';\n    }\n\n    // Only update monetary search class if it changed\n    if (!previousState || previousState.isMonetarySearch !== state.isMonetarySearch) {\n      dialog.classList.toggle('monetary-search', state.isMonetarySearch || false);\n    }\n\n    // Re-render content if visibility changed OR if relevant state changed\n    const contentChanged = visibilityChanged ||\n      !previousState ||\n      previousState.status !== state.status ||\n      previousState.query !== state.query ||\n      previousState.response !== state.response;\n\n    if (contentChanged) {\n      // Use requestAnimationFrame to defer heavy DOM operations\n      requestAnimationFrame(() => {\n        renderDialogContents(dialog, state, options);\n      });\n    }\n\n    previousState = state;\n  };\n\n  return {\n    element: dialog,\n    setState,\n  };\n}\n\nfunction renderDialogContents(\n  container: HTMLDivElement,\n  state: SearchDialogState,\n  options: SearchDialogOptions,\n) {\n  container.innerHTML = '';\n\n  if (state.status === 'loading') {\n    container.append(renderLoadingState(state.query));\n    return;\n  }\n\n  if (state.status === 'error') {\n    container.append(renderErrorState());\n    return;\n  }\n\n  const effectiveLength = getEffectiveQueryLength(state.query);\n\n  if (effectiveLength === 0) {\n    container.append(renderEmptyState());\n    return;\n  }\n\n  if (isQueryTooShort(state.query)) {\n    container.append(renderShortQueryState());\n    return;\n  }\n\n  const response = state.response;\n  if (!response || response.totalResults === 0) {\n    container.append(renderNoResults(state.query));\n    return;\n  }\n\n  response.limitedGroups.forEach((group) => {\n    container.append(renderGroup(group, state.query, state.isMonetarySearch));\n  });\n\n  const footer = document.createElement('div');\n  footer.className = 'search-dialog__footer';\n\n  const seeAllButton = document.createElement('button');\n  seeAllButton.type = 'button';\n  seeAllButton.className = 'see-all-button';\n  seeAllButton.textContent = `See ${response.totalResults} results \u2192`;\n  seeAllButton.addEventListener('click', () => options.onSeeAllResults());\n\n  footer.append(seeAllButton);\n  container.append(footer);\n}\n\nfunction renderEmptyState(): HTMLElement {\n  const wrapper = document.createElement('div');\n  wrapper.className = 'search-dialog__empty';\n  wrapper.innerHTML = `\n    <h3>Quick search</h3>\n    <p>Start typing or press <kbd>/</kbd> to jump into the search bar.</p>\n  `;\n  return wrapper;\n}\n\nfunction renderShortQueryState(): HTMLElement {\n  const wrapper = document.createElement('div');\n  wrapper.className = 'search-dialog__empty';\n  wrapper.innerHTML = `\n    <h3>Keep typing</h3>\n    <p>Enter at least ${MIN_EFFECTIVE_QUERY_LENGTH} characters to see results.</p>\n  `;\n  return wrapper;\n}\n\nfunction renderLoadingState(query: string): HTMLElement {\n  const wrapper = document.createElement('div');\n  wrapper.className = 'search-dialog__loading';\n  wrapper.innerHTML = `\n    <div class=\"spinner\" aria-hidden=\"true\"></div>\n    <div>\n      <p>Searching for \u201C${escapeHtml(query)}\u201D\u2026</p>\n    </div>\n  `;\n  return wrapper;\n}\n\nfunction renderErrorState(): HTMLElement {\n  const wrapper = document.createElement('div');\n  wrapper.className = 'search-dialog__error';\n  wrapper.innerHTML = `\n    <h3>We hit a snag</h3>\n    <p>Try again in a few seconds.</p>\n  `;\n  return wrapper;\n}\n\nfunction renderNoResults(query: string): HTMLElement {\n  const wrapper = document.createElement('div');\n  wrapper.className = 'search-dialog__empty';\n  wrapper.innerHTML = `\n    <h3>No matches</h3>\n    <p>We couldn\u2019t find results for \u201C${escapeHtml(query)}\u201D. Adjust your keywords or filters.</p>\n  `;\n  return wrapper;\n}\n\n\nfunction renderGroup(group: SearchGroup, query: string, isMonetarySearch?: boolean): HTMLElement {\n  const section = document.createElement('section');\n  section.className = 'search-dialog__group';\n\n  const heading = document.createElement('h4');\n  heading.textContent = formatEntityType(group.entityType, { plural: true });\n  section.append(heading);\n\n  const list = document.createElement('ul');\n  list.className = 'search-dialog__list';\n\n  group.items.forEach((item) => {\n    list.append(renderGroupItem(item, query, isMonetarySearch));\n  });\n\n  section.append(list);\n  return section;\n}\n\nfunction renderGroupItem(item: SearchRecord, query: string, isMonetarySearch?: boolean): HTMLLIElement {\n  const li = document.createElement('li');\n  li.className = 'search-dialog__item';\n\n  const highlightFn = getHighlightFunction(query, isMonetarySearch || false);\n\n  const title = document.createElement('div');\n  title.className = 'search-dialog__item-title';\n  title.innerHTML = highlightFn(item.title, query);\n\n  const meta = document.createElement('div');\n  meta.className = 'search-dialog__item-meta';\n  const metaText = buildItemMeta(item, query, isMonetarySearch);\n  meta.innerHTML = highlightFn(metaText, query);\n\n  // Add context line showing what was matched\n  const match = findBestMatch(item, query);\n  if (match && match.field !== 'title') {\n    const context = document.createElement('div');\n    context.className = 'search-context';\n    const highlightedSnippet = isMonetarySearch ? highlightMonetaryValues(match.content, query) : getContextSnippet(match, 80, query);\n    context.innerHTML = highlightedSnippet;\n    li.append(title, meta, context);\n  } else {\n    li.append(title, meta);\n  }\n\n  // Add line item matches for non-Document entities\n  if (query && isFinancialRecord(item)) {\n    const lineItemsMatch = renderMiniLineItems(item, query, isMonetarySearch);\n    if (lineItemsMatch) {\n      li.append(lineItemsMatch);\n    }\n  }\n\n  return li;\n}\n\nfunction buildItemMeta(item: SearchRecord, query?: string, isMonetarySearch?: boolean): string {\n  const parts: string[] = [];\n  parts.push(item.project);\n\n  if (item.entityType === 'Document') {\n    parts.push((item as any).documentType);\n    parts.push(`Updated ${formatDate(item.updatedAt)}`);\n    return parts.filter(Boolean).join(' \u2022 ');\n  }\n\n  if (isFinancialRecord(item)) {\n    parts.push(formatCurrency(item.totalValue));\n    if (item.status) {\n      parts.push(item.status);\n    }\n    return parts.filter(Boolean).join(' \u2022 ');\n  }\n\n  if (isPersonRecord(item)) {\n    parts.push(item.personType);\n    parts.push(item.jobTitle);\n    if (item.associatedOrganization) {\n      parts.push(item.associatedOrganization);\n    }\n    parts.push(item.location);\n    return parts.filter(Boolean).join(' \u2022 ');\n  }\n\n  if (isOrganizationRecord(item)) {\n    parts.push(item.organizationType);\n    parts.push(item.tradeFocus);\n    parts.push(item.serviceArea);\n    return parts.filter(Boolean).join(' \u2022 ');\n  }\n\n  return parts.filter(Boolean).join(' \u2022 ');\n}\n\nfunction renderMiniLineItems(item: SearchRecord, query: string, isMonetarySearch?: boolean): HTMLElement | null {\n  if (!isFinancialRecord(item)) {\n    return null;\n  }\n\n  const items = item.lineItems ?? [];\n  if (items.length === 0) {\n    return null;\n  }\n\n  const highlightFn = getHighlightFunction(query, isMonetarySearch || false);\n\n  // Find line items that have actual highlighting matches (not just text matches)\n  const matchingItems = items.filter((lineItem: any) => {\n    const searchableFields = [\n      { value: lineItem.lineItemTitle, field: 'title' },\n      { value: lineItem.lineItemDescription, field: 'description' },\n      { value: lineItem.lineItemType, field: 'type' },\n      { value: lineItem.lineItemQuantity?.toString(), field: 'quantity' },\n      { value: lineItem.lineItemQuantityUnitOfMeasure, field: 'unit' },\n      { value: formatCurrency(lineItem.lineItemUnitPrice), field: 'unitPrice' },\n      { value: formatCurrency(lineItem.lineItemTotal), field: 'total' }\n    ];\n    \n    // Check if any field has actual highlighting (contains <mark> tags)\n    return searchableFields.some(({ value }) => {\n      if (!value) return false;\n      \n      const highlighted = highlightFn(value, query);\n      return highlighted.includes('<mark');\n    });\n  });\n\n  if (matchingItems.length === 0) {\n    return null;\n  }\n\n  const wrapper = document.createElement('small');\n  wrapper.className = 'mini-line-items';\n\n  const table = document.createElement('table');\n  table.className = 'mini-line-items__table';\n\n  // Show up to 3 matching line items\n  const displayItems = matchingItems.slice(0, 3);\n  \n  displayItems.forEach((line: any) => {\n    const row = document.createElement('tr');\n    const unitPrice = formatCurrency(line.lineItemUnitPrice);\n    const total = formatCurrency(line.lineItemTotal);\n    const quantity = `${line.lineItemQuantity} ${line.lineItemQuantityUnitOfMeasure}`;\n    \n    row.innerHTML = `\n      <td class=\"mini-line-items__description\">${highlightFn(line.lineItemTitle, query)}</td>\n      <td class=\"mini-line-items__type\">${highlightFn(line.lineItemType, query)}</td>\n      <td class=\"mini-line-items__quantity\">${highlightFn(quantity, query)}</td>\n      <td class=\"mini-line-items__unit-price\">${highlightFn(unitPrice, query)}</td>\n      <td class=\"mini-line-items__total\">${highlightFn(total, query)}</td>\n    `;\n    table.append(row);\n  });\n\n  // Add \"more items\" row if there are additional matching items\n  if (matchingItems.length > 3) {\n    const moreRow = document.createElement('tr');\n    moreRow.className = 'mini-line-items__more-row';\n    const remaining = matchingItems.length - 3;\n    moreRow.innerHTML = `\n      <td colspan=\"5\" class=\"mini-line-items__more\">+${remaining} more matching line item${remaining === 1 ? '' : 's'}\u2026</td>\n    `;\n    table.append(moreRow);\n  }\n\n  wrapper.append(table);\n  return wrapper;\n}\n\nfunction escapeHtml(value: string): string {\n  const div = document.createElement('div');\n  div.textContent = value;\n  return div.innerHTML;\n}\n", "{\n  \"searchDelayMs\": 100,\n  \"groupLimits\": {\n    \"Document\": 4,\n    \"ClientInvoice\": 4,\n    \"PurchaseOrder\": 4,\n    \"Bill\": 4,\n    \"Receipt\": 4,\n    \"Payment\": 4,\n    \"Person\": 4,\n    \"Organization\": 4\n  },\n  \"lineItemsContextCount\": 3,\n  \"showLineItemsByDefault\": true,\n  \"collapseIrrelevantLineItems\": true,\n  \"lineItemsCollapseThreshold\": 5\n}\n", "export type StoreListener<T> = (state: T) => void;\nexport type StoreUpdater<T> = (state: T) => T;\n\nexport interface Store<T> {\n  getState(): T;\n  setState(updater: Partial<T> | StoreUpdater<T>): void;\n  subscribe(listener: StoreListener<T>): () => void;\n}\n\nexport function createStore<T>(initialState: T): Store<T> {\n  let state = initialState;\n  const listeners = new Set<StoreListener<T>>();\n\n  const getState = () => state;\n\n  const setState: Store<T>['setState'] = (updater) => {\n    const nextState =\n      typeof updater === 'function'\n        ? (updater as StoreUpdater<T>)(state)\n        : ({ ...state, ...(updater as Partial<T>) } as T);\n\n    if (Object.is(nextState, state)) {\n      return;\n    }\n\n    state = nextState;\n    listeners.forEach((listener) => listener(state));\n  };\n\n  const subscribe: Store<T>['subscribe'] = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n\n  return { getState, setState, subscribe };\n}\n", "import defaultsJson from '../config/defaults.json';\nimport { createStore } from './store';\n\nexport interface SettingsState {\n  searchDelayMs: number;\n  groupLimits: Record<string, number>;\n  lineItemsContextCount: number;\n  showLineItemsByDefault: boolean;\n  collapseIrrelevantLineItems: boolean;\n  lineItemsCollapseThreshold: number;\n}\n\nconst STORAGE_KEY = 'search-prototype.settings';\nconst DEFAULTS: SettingsState = normalize(defaultsJson as SettingsState);\n\nfunction normalize(state: SettingsState): SettingsState {\n  return {\n    ...state,\n    groupLimits: { ...state.groupLimits },\n    lineItemsContextCount: state.lineItemsContextCount ?? 3,\n    showLineItemsByDefault: state.showLineItemsByDefault ?? true,\n    collapseIrrelevantLineItems: state.collapseIrrelevantLineItems ?? true,\n    lineItemsCollapseThreshold: state.lineItemsCollapseThreshold ?? 5,\n  };\n}\n\nfunction mergeSettings(base: SettingsState, overrides?: Partial<SettingsState>): SettingsState {\n  if (!overrides) {\n    return normalize(base);\n  }\n\n  return {\n    ...base,\n    ...overrides,\n    groupLimits: {\n      ...base.groupLimits,\n      ...(overrides.groupLimits ?? {}),\n    },\n  };\n}\n\nfunction readPersisted(): Partial<SettingsState> | undefined {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  try {\n    const raw = window.localStorage.getItem(STORAGE_KEY);\n    if (!raw) {\n      return undefined;\n    }\n    return JSON.parse(raw) as Partial<SettingsState>;\n  } catch (error) {\n    console.warn('Failed to parse persisted settings; falling back to defaults.', error);\n    return undefined;\n  }\n}\n\nfunction persist(state: SettingsState) {\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  window.localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n}\n\nconst initialState = mergeSettings(DEFAULTS, readPersisted());\nconst store = createStore<SettingsState>(initialState);\n\nstore.subscribe((state) => {\n  persist(state);\n});\n\nexport const settingsStore = {\n  getState: store.getState,\n  subscribe: store.subscribe,\n  update(partial: Partial<SettingsState>) {\n    store.setState((prev) => mergeSettings(prev, partial));\n  },\n  setGroupLimit(section: string, limit: number) {\n    store.setState((prev) =>\n      mergeSettings(prev, {\n        groupLimits: {\n          ...prev.groupLimits,\n          [section]: limit,\n        },\n      }),\n    );\n  },\n  reset() {\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem(STORAGE_KEY);\n    }\n    store.setState(() => normalize(DEFAULTS));\n  },\n  get defaults() {\n    return normalize(DEFAULTS);\n  },\n};\n\nexport type SettingsStore = typeof settingsStore;\n", "import {\n  FacetKey,\n  FacetSelectionState,\n  FacetValue,\n  SearchGroup,\n  SearchRecord,\n  SearchResponse,\n  isFinancialRecord,\n  isOrganizationRecord,\n  isPersonRecord,\n} from '../types';\nimport { formatCurrency, formatDate, formatEntityType } from '../utils/format';\nimport { SearchStatus } from '../state/appState';\nimport { findBestMatch, getContextSnippet, highlightText, highlightMonetaryValues, highlightHybrid } from '../utils/highlight';\nimport { settingsStore } from '../state/settingsStore';\nimport { MIN_EFFECTIVE_QUERY_LENGTH, isQueryTooShort } from '../utils/query';\n\n// Helper function to detect if a query has monetary potential (for hybrid highlighting)\nfunction hasMonetaryPotential(query: string): boolean {\n  const tokens = query.toLowerCase().split(/\\s+/).filter(Boolean);\n  return tokens.some(token => {\n    return /^\\d+(,\\d{3})*(\\.\\d+)?$/.test(token) || \n           /^\\d+(\\.\\d+)?$/.test(token) ||\n           /^\\$?\\d+(,\\d{3})*(\\.\\d+)?$/.test(token) ||\n           /\\d/.test(token); // Any token containing a digit\n  });\n}\n\n// Helper function to determine which highlighting function to use\nfunction getHighlightFunction(query: string, isMonetarySearch: boolean) {\n  if (isMonetarySearch) {\n    return highlightMonetaryValues;\n  } else if (hasMonetaryPotential(query)) {\n    return highlightHybrid;\n  } else {\n    return highlightText;\n  }\n}\n\nconst FACET_LABELS: Record<FacetKey, string> = {\n  entityType: 'Type',\n  project: 'Project',\n  status: 'Status',\n  documentType: 'Document Type',\n  client: 'Client',\n  issuedDate: 'Issued',\n  totalValue: 'Total',\n  groupBy: 'Group by',\n  personType: 'Person Type',\n  contactOrganization: 'Contact Organization',\n  organizationType: 'Organization Type',\n  tradeFocus: 'Trade Focus',\n};\n\nexport interface ResultsViewOptions {\n  onFacetToggle(key: FacetKey, value: string): void;\n  onClearFacets?(): void;\n}\n\nexport interface ResultsRenderContext {\n  response: SearchResponse | null;\n  selections: FacetSelectionState;\n  status: SearchStatus;\n  query: string;\n  errorMessage?: string;\n  isMonetarySearch?: boolean;\n}\n\nexport interface ResultsViewHandles {\n  element: HTMLElement;\n  render(context: ResultsRenderContext): void;\n}\n\nexport function createResultsView(options: ResultsViewOptions): ResultsViewHandles {\n  const container = document.createElement('section');\n  container.className = 'results-view';\n\n  const header = document.createElement('header');\n  header.className = 'results-view__header';\n  header.innerHTML = `\n    <div>\n      <h1>Search Results</h1>\n      <p class=\"results-view__summary\" id=\"results-summary\"></p>\n    </div>\n    <div class=\"results-view__actions\">\n      <button type=\"button\" class=\"clear-facets\" hidden>Clear filters</button>\n    </div>\n  `;\n\n  const mainContent = document.createElement('div');\n  mainContent.className = 'results-view__main';\n\n  const facetsContainer = document.createElement('aside');\n  facetsContainer.className = 'results-view__facets';\n\n  const resultsContainer = document.createElement('div');\n  resultsContainer.className = 'results-view__groups';\n\n  mainContent.append(facetsContainer, resultsContainer);\n  container.append(header, mainContent);\n\n  const summaryEl = header.querySelector<HTMLParagraphElement>('#results-summary')!;\n  const clearButton = header.querySelector<HTMLButtonElement>('.clear-facets')!;\n\n  clearButton.addEventListener('click', () => {\n    options.onClearFacets?.();\n  });\n\n  // Track previous context to avoid unnecessary re-renders\n  let previousContext: ResultsRenderContext | null = null;\n\n  const render = (context: ResultsRenderContext) => {\n    const { response, selections, status, query, errorMessage, isMonetarySearch } = context;\n\n    // Only update summary if relevant state changed\n    const summaryChanged = !previousContext ||\n      previousContext.status !== status ||\n      previousContext.response !== response ||\n      previousContext.query !== query ||\n      previousContext.errorMessage !== errorMessage;\n\n    if (summaryChanged) {\n      renderSummary(summaryEl, status, response, query, errorMessage);\n    }\n\n    // Only update facets if relevant state changed\n    const facetsChanged = !previousContext ||\n      previousContext.status !== status ||\n      previousContext.response !== response ||\n      previousContext.selections !== selections;\n\n    if (facetsChanged) {\n      renderFacets(facetsContainer, status, response, selections, options);\n    }\n\n    // Only update results if relevant state changed\n    const resultsChanged = !previousContext ||\n      previousContext.status !== status ||\n      previousContext.response !== response ||\n      previousContext.query !== query ||\n      previousContext.errorMessage !== errorMessage ||\n      previousContext.isMonetarySearch !== isMonetarySearch;\n\n    if (resultsChanged) {\n      // Use requestAnimationFrame to defer heavy DOM operations\n      requestAnimationFrame(() => {\n        renderGroups(resultsContainer, status, response, query, errorMessage, isMonetarySearch);\n      });\n    }\n\n    // Only update clear button if selections changed\n    const selectionsChanged = !previousContext || previousContext.selections !== selections;\n    if (selectionsChanged) {\n      const hasSelections = selections && Object.keys(selections).length > 0;\n      clearButton.hidden = !hasSelections;\n    }\n\n    previousContext = context;\n  };\n\n  return {\n    element: container,\n    render,\n  };\n}\n\nfunction renderSummary(\n  target: HTMLElement,\n  status: SearchStatus,\n  response: SearchResponse | null,\n  query: string,\n  errorMessage?: string,\n) {\n  switch (status) {\n    case 'idle':\n      if (isQueryTooShort(query)) {\n        target.textContent = `Enter at least ${MIN_EFFECTIVE_QUERY_LENGTH} characters to see results.`;\n      } else {\n        target.textContent = 'Type a query to explore results and filters.';\n      }\n      return;\n    case 'loading':\n      target.textContent = query ? `Searching for \u201C${query}\u201D\u2026` : 'Searching\u2026';\n      return;\n    case 'error':\n      target.textContent = errorMessage ?? 'Search failed. Try again.';\n      return;\n    case 'ready':\n      if (!response) {\n        target.textContent = 'No results.';\n        return;\n      }\n      target.textContent = `${response.totalResults} result${\n        response.totalResults === 1 ? '' : 's'\n      } for \u201C${response.query}\u201D.`;\n      return;\n    default:\n      target.textContent = '';\n  }\n}\n\nfunction renderFacets(\n  container: HTMLElement,\n  status: SearchStatus,\n  response: SearchResponse | null,\n  selections: FacetSelectionState,\n  options: ResultsViewOptions,\n) {\n  container.innerHTML = '';\n\n  if (status === 'idle') {\n    container.classList.add('is-empty');\n    container.textContent = 'Facet breakdowns will appear once you run a search.';\n    return;\n  }\n\n  if (status === 'loading') {\n    container.classList.add('is-empty');\n    container.textContent = 'Calculating facets\u2026';\n    return;\n  }\n\n  if (status === 'error') {\n    container.classList.add('is-empty');\n    container.textContent = 'Facets unavailable while search is failing.';\n    return;\n  }\n\n  if (!response || !response.facets) {\n    container.classList.add('is-empty');\n    container.textContent = 'No facet data for the current results.';\n    return;\n  }\n\n  const facetsEntries = Object.entries(response.facets) as [FacetKey, FacetValue[]][];\n  if (facetsEntries.length === 0) {\n    container.classList.add('is-empty');\n    container.textContent = 'No facet data for the current results.';\n    return;\n  }\n\n  container.classList.remove('is-empty');\n\n  facetsEntries.forEach(([key, values]) => {\n    const block = document.createElement('section');\n    block.className = 'results-view__facet-block';\n\n    const heading = document.createElement('h3');\n    heading.textContent = FACET_LABELS[key] ?? key;\n    block.append(heading);\n\n    const list = document.createElement('ul');\n    list.className = 'results-view__facet-list';\n\n    values.forEach((facet) => {\n      const listItem = document.createElement('li');\n      listItem.className = 'results-view__facet-item';\n\n      const label = document.createElement('label');\n      label.className = 'facet-checkbox';\n\n      const checkbox = document.createElement('input');\n      checkbox.type = 'checkbox';\n      checkbox.className = 'facet-checkbox__input';\n      checkbox.dataset.key = key;\n      checkbox.dataset.value = facet.value;\n\n      const isSelected = selections[key]?.has(facet.value) ?? false;\n      checkbox.checked = isSelected;\n\n      const text = document.createElement('span');\n      text.className = 'facet-checkbox__text';\n      text.textContent = facet.value;\n\n      const count = document.createElement('span');\n      count.className = 'facet-checkbox__count';\n      count.textContent = String(facet.count);\n\n      label.append(checkbox, text, count);\n      listItem.append(label);\n      list.append(listItem);\n\n      checkbox.addEventListener('change', () => {\n        options.onFacetToggle(key, facet.value);\n      });\n    });\n\n    block.append(list);\n    container.append(block);\n  });\n}\n\nfunction renderGroups(\n  container: HTMLElement,\n  status: SearchStatus,\n  response: SearchResponse | null,\n  query: string,\n  errorMessage?: string,\n  isMonetarySearch?: boolean,\n) {\n  container.innerHTML = '';\n\n  if (status === 'idle') {\n    const message = isQueryTooShort(query)\n      ? `Enter at least ${MIN_EFFECTIVE_QUERY_LENGTH} characters to see matching records.`\n      : 'Run a search to populate full results.';\n    container.innerHTML = `<p class=\"results-view__empty\">${message}</p>`;\n    return;\n  }\n\n  if (status === 'loading') {\n    container.innerHTML = '<p class=\"results-view__empty\">Fetching results\u2026</p>';\n    return;\n  }\n\n  if (status === 'error') {\n    container.innerHTML = `<p class=\"results-view__empty\">${\n      errorMessage ?? 'Something went wrong while searching.'\n    }</p>`;\n    return;\n  }\n\n  if (!response || !response.fullGroups.length) {\n    container.innerHTML = `<p class=\"results-view__empty\">No results for \"${query}\". Adjust search terms or facets.</p>`;\n    return;\n  }\n\n  // If results are grouped, render groups; otherwise render as flat list\n  if (response.isGrouped) {\n    response.fullGroups.forEach((group) => {\n      container.append(renderGroup(group, group.groupTitle, query, isMonetarySearch));\n    });\n  } else {\n    // Render as flat list without group headers\n    const flatList = document.createElement('div');\n    flatList.className = 'results-list';\n    \n    response.records.forEach((record) => {\n      flatList.append(renderResultCard(record, query, isMonetarySearch));\n    });\n    \n    container.append(flatList);\n  }\n}\n\nfunction renderGroup(group: SearchGroup, groupTitle?: string, query?: string, isMonetarySearch?: boolean): HTMLElement {\n  const section = document.createElement('section');\n  section.className = 'results-group';\n\n  const heading = document.createElement('header');\n  heading.className = 'results-group__header';\n  \n  const title = groupTitle || formatEntityType(group.entityType, { plural: true });\n  heading.innerHTML = `\n    <h2>${title}</h2>\n    <span class=\"results-group__count\">${group.items.length}</span>\n  `;\n\n  const list = document.createElement('div');\n  list.className = 'results-group__list';\n\n  group.items.forEach((item) => {\n    list.append(renderResultCard(item, query, isMonetarySearch));\n  });\n\n  section.append(heading, list);\n  return section;\n}\n\nfunction renderResultCard(item: SearchRecord, query?: string, isMonetarySearch?: boolean): HTMLElement {\n  const card = document.createElement('article');\n  card.className = 'result-card';\n\n  const header = document.createElement('div');\n  header.className = 'result-card__header';\n\n  const highlightFn = query ? getHighlightFunction(query, isMonetarySearch || false) : null;\n\n  const title = document.createElement('h3');\n  title.innerHTML = query && highlightFn ? highlightFn(item.title, query) : item.title;\n\n  const badge = document.createElement('span');\n  badge.className = 'result-card__badge';\n  badge.textContent = formatEntityType(item.entityType);\n\n  header.append(title, badge);\n\n  const summary = document.createElement('p');\n  summary.className = 'result-card__summary';\n  summary.innerHTML = query && highlightFn ? highlightFn(item.summary, query) : item.summary;\n\n  const metaList = document.createElement('ul');\n  metaList.className = 'result-card__meta';\n  metaList.append(...buildMetaItems(item, query, isMonetarySearch));\n\n  card.append(header, summary, metaList);\n\n  // Add context line if the match is not in title, summary, or line items\n  if (query) {\n    const match = findBestMatch(item, query);\n    if (match && match.field !== 'title' && match.field !== 'summary' && !match.field.startsWith('lineItem')) {\n      const context = document.createElement('div');\n      context.className = 'search-context';\n      const highlightedSnippet = isMonetarySearch ? highlightMonetaryValues(match.content, query) : getContextSnippet(match, 120, query);\n      context.innerHTML = `<strong>Matched in ${getFieldLabel(match.field)}:</strong> ${highlightedSnippet}`;\n      card.append(context);\n    }\n  }\n\n  if (isFinancialRecord(item)) {\n    const lineItemsBlock = renderLineItems(item, query, isMonetarySearch);\n    if (lineItemsBlock) {\n      card.append(lineItemsBlock);\n    }\n  }\n\n  return card;\n}\n\nfunction buildMetaItems(item: SearchRecord, query?: string, isMonetarySearch?: boolean): HTMLLIElement[] {\n  const metas: HTMLLIElement[] = [];\n\n  const highlightFn = query ? getHighlightFunction(query, isMonetarySearch || false) : null;\n  const highlightValue = (value: string) => (highlightFn ? highlightFn(value, query!) : value);\n\n  const pushMeta = (label: string, value?: string) => {\n    if (!value) {\n      return;\n    }\n    const entry = document.createElement('li');\n    entry.innerHTML = `<span>${label}</span><strong>${highlightValue(value)}</strong>`;\n    metas.push(entry);\n  };\n\n  pushMeta('Project', item.project);\n  pushMeta('Status', item.status);\n\n  if (item.entityType === 'Document') {\n    const doc = item as any;\n    pushMeta('Type', doc.documentType);\n    pushMeta('Updated', formatDate(item.updatedAt));\n    return metas;\n  }\n\n  if (isFinancialRecord(item)) {\n    pushMeta('Issued', formatDate(item.issuedDate));\n    if (item.dueDate) {\n      pushMeta('Due', formatDate(item.dueDate));\n    }\n    pushMeta('Total', formatCurrency(item.totalValue));\n    return metas;\n  }\n\n  if (isPersonRecord(item)) {\n    pushMeta('Person Type', item.personType);\n    pushMeta('Role', item.jobTitle);\n    pushMeta('Organization', item.associatedOrganization);\n    pushMeta('Location', item.location);\n    pushMeta('Email', item.email);\n    pushMeta('Phone', item.phone);\n    pushMeta('Trade Focus', item.tradeFocus ?? undefined);\n    return metas;\n  }\n\n  if (isOrganizationRecord(item)) {\n    pushMeta('Business Type', item.organizationType);\n    pushMeta('Trade', item.tradeFocus);\n    pushMeta('Service Area', item.serviceArea);\n    pushMeta('Primary Contact', item.primaryContact);\n    pushMeta('Phone', item.phone);\n    pushMeta('Email', item.email);\n    pushMeta('Website', item.website ?? undefined);\n    return metas;\n  }\n\n  return metas;\n}\n\nfunction hasLineItemMatches(item: SearchRecord, query?: string, isMonetarySearch?: boolean): boolean {\n  if (!query || !isFinancialRecord(item)) return false;\n  \n  const items = item.lineItems ?? [];\n  if (items.length === 0) return false;\n\n  const highlightFn = getHighlightFunction(query, isMonetarySearch || false);\n\n  // Check if any line item has actual highlighting matches\n  return items.some((lineItem) => {\n    const searchableFields = [\n      lineItem.lineItemTitle,\n      lineItem.lineItemDescription,\n      lineItem.lineItemType,\n      lineItem.lineItemQuantity?.toString(),\n      lineItem.lineItemQuantityUnitOfMeasure,\n      formatCurrency(lineItem.lineItemUnitPrice),\n      formatCurrency(lineItem.lineItemTotal)\n    ];\n    \n    return searchableFields.some((value) => {\n      if (!value) return false;\n      \n      const highlighted = highlightFn(value, query);\n      return highlighted.includes('<mark');\n    });\n  });\n}\n\nfunction getMatchingLineItemIndices(item: SearchRecord, query?: string, isMonetarySearch?: boolean): number[] {\n  if (!query || !isFinancialRecord(item)) return [];\n  \n  const items = item.lineItems ?? [];\n  if (items.length === 0) return [];\n\n  const matchingIndices: number[] = [];\n  const highlightFn = getHighlightFunction(query, isMonetarySearch || false);\n  \n  items.forEach((lineItem: any, index: number) => {\n    const searchableFields = [\n      lineItem.lineItemTitle,\n      lineItem.lineItemDescription,\n      lineItem.lineItemType,\n      lineItem.lineItemQuantity?.toString(),\n      lineItem.lineItemQuantityUnitOfMeasure,\n      formatCurrency(lineItem.lineItemUnitPrice),\n      formatCurrency(lineItem.lineItemTotal)\n    ];\n    \n    const hasMatch = searchableFields.some((value) => {\n      if (!value) return false;\n      \n      const highlighted = highlightFn(value, query);\n      return highlighted.includes('<mark');\n    });\n    \n    if (hasMatch) {\n      matchingIndices.push(index);\n    }\n  });\n  \n  return matchingIndices;\n}\n\ninterface MatchGroup {\n  startIndex: number;\n  endIndex: number;\n  indices: number[];\n}\n\nfunction groupMatchingLineItems(matchingIndices: number[], collapseThreshold: number): MatchGroup[] {\n  if (matchingIndices.length === 0) return [];\n  \n  const groups: MatchGroup[] = [];\n  let currentGroup: MatchGroup = {\n    startIndex: matchingIndices[0],\n    endIndex: matchingIndices[0],\n    indices: [matchingIndices[0]]\n  };\n  \n  for (let i = 1; i < matchingIndices.length; i++) {\n    const currentIndex = matchingIndices[i];\n    const lastIndex = matchingIndices[i - 1];\n    \n    // If the gap is within the threshold, add to current group\n    if (currentIndex - lastIndex <= collapseThreshold) {\n      currentGroup.endIndex = currentIndex;\n      currentGroup.indices.push(currentIndex);\n    } else {\n      // Gap is too large, start a new group\n      groups.push(currentGroup);\n      currentGroup = {\n        startIndex: currentIndex,\n        endIndex: currentIndex,\n        indices: [currentIndex]\n      };\n    }\n  }\n  \n  // Add the last group\n  groups.push(currentGroup);\n  \n  return groups;\n}\n\nfunction calculateDisplayRanges(\n  groups: MatchGroup[], \n  contextCount: number, \n  totalItems: number\n): Array<{ start: number; end: number; isCollapsed?: boolean }> {\n  if (groups.length === 0) return [];\n  \n  const ranges: Array<{ start: number; end: number; isCollapsed?: boolean }> = [];\n  \n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    \n    // Calculate the range for this group with context\n    const start = Math.max(0, group.startIndex - contextCount);\n    const end = Math.min(totalItems - 1, group.endIndex + contextCount);\n    \n    ranges.push({ start, end });\n    \n    // Add collapsed range between groups (except after the last group)\n    if (i < groups.length - 1) {\n      const nextGroup = groups[i + 1];\n      const gapStart = end + 1;\n      const gapEnd = Math.max(0, nextGroup.startIndex - contextCount) - 1;\n      \n      if (gapStart <= gapEnd) {\n        ranges.push({ start: gapStart, end: gapEnd, isCollapsed: true });\n      }\n    }\n  }\n  \n  return ranges;\n}\n\nfunction renderLineItems(item: SearchRecord, query?: string, isMonetarySearch?: boolean): HTMLElement | null {\n  if (!isFinancialRecord(item)) {\n    return null;\n  }\n\n  const items = item.lineItems ?? [];\n  if (items.length === 0) {\n    return null;\n  }\n\n  const settings = settingsStore.getState();\n  const hasMatches = hasLineItemMatches(item, query, isMonetarySearch);\n  \n  // If there are matches in line items, always show them (respect lineItemsContextCount setting)\n  // If no matches, respect the showLineItemsByDefault setting\n  const shouldShowLineItems = hasMatches || settings.showLineItemsByDefault;\n\n  const wrapper = document.createElement('div');\n  wrapper.className = 'result-card__line-items';\n\n  const heading = document.createElement('h4');\n  heading.textContent = 'Line items';\n  wrapper.append(heading);\n\n  // Helper function to render a line item row\n  const renderLineItemRow = (line: any, index: number): HTMLTableRowElement => {\n    const row = document.createElement('tr');\n    const unitPrice = formatCurrency(line.lineItemUnitPrice);\n    const total = formatCurrency(line.lineItemTotal);\n    const quantity = `${line.lineItemQuantity} ${line.lineItemQuantityUnitOfMeasure}`;\n    const highlightFn = query ? getHighlightFunction(query, isMonetarySearch || false) : null;\n    \n    row.innerHTML = `\n      <td class=\"line-item__description\">${query && highlightFn ? highlightFn(line.lineItemTitle, query) : line.lineItemTitle}</td>\n      <td class=\"line-item__type\">${query && highlightFn ? highlightFn(line.lineItemType, query) : line.lineItemType}</td>\n      <td class=\"line-item__quantity\">${query && highlightFn ? highlightFn(quantity, query) : quantity}</td>\n      <td class=\"line-item__unit-price\">${query && highlightFn ? highlightFn(unitPrice, query) : unitPrice}</td>\n      <td class=\"line-item__total\">${query && highlightFn ? highlightFn(total, query) : total}</td>\n    `;\n    return row;\n  };\n\n  // If we shouldn't show line items by default and there are no matches, show a toggle link\n  if (!shouldShowLineItems) {\n    const toggleLink = document.createElement('button');\n    toggleLink.className = 'line-items-toggle';\n    toggleLink.textContent = `Show line items (${items.length})`;\n    toggleLink.type = 'button';\n    \n    const table = document.createElement('table');\n    table.className = 'line-items-table';\n    table.style.display = 'none';\n    \n    // Create table header\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headerRow.innerHTML = `\n      <th>Description</th>\n      <th>Type</th>\n      <th>Quantity</th>\n      <th>Unit Price</th>\n      <th>Total</th>\n    `;\n    thead.append(headerRow);\n    table.append(thead);\n\n    // Create table body\n    const tbody = document.createElement('tbody');\n    const highlightFn = query ? getHighlightFunction(query, isMonetarySearch || false) : null;\n    \n    items.forEach((line: any) => {\n      const row = document.createElement('tr');\n      const unitPrice = formatCurrency(line.lineItemUnitPrice);\n      const total = formatCurrency(line.lineItemTotal);\n      const quantity = `${line.lineItemQuantity} ${line.lineItemQuantityUnitOfMeasure}`;\n      \n      row.innerHTML = `\n        <td class=\"line-item__description\">${query && highlightFn ? highlightFn(line.lineItemTitle, query) : line.lineItemTitle}</td>\n        <td class=\"line-item__type\">${query && highlightFn ? highlightFn(line.lineItemType, query) : line.lineItemType}</td>\n        <td class=\"line-item__quantity\">${query && highlightFn ? highlightFn(quantity, query) : quantity}</td>\n        <td class=\"line-item__unit-price\">${query && highlightFn ? highlightFn(unitPrice, query) : unitPrice}</td>\n        <td class=\"line-item__total\">${query && highlightFn ? highlightFn(total, query) : total}</td>\n      `;\n      tbody.append(row);\n    });\n    table.append(tbody);\n    \n    toggleLink.addEventListener('click', () => {\n      if (table.style.display === 'none') {\n        table.style.display = 'table';\n        toggleLink.textContent = 'Hide line items';\n      } else {\n        table.style.display = 'none';\n        toggleLink.textContent = `Show line items (${items.length})`;\n      }\n    });\n    \n    wrapper.append(toggleLink, table);\n    return wrapper;\n  }\n\n  // Show line items normally (either because there are matches or setting is enabled)\n  const table = document.createElement('table');\n  table.className = 'line-items-table';\n\n  // Create table header\n  const thead = document.createElement('thead');\n  const headerRow = document.createElement('tr');\n  headerRow.innerHTML = `\n    <th>Description</th>\n    <th>Type</th>\n    <th>Quantity</th>\n    <th>Unit Price</th>\n    <th>Total</th>\n  `;\n  thead.append(headerRow);\n  table.append(thead);\n\n  // Create table body\n  const tbody = document.createElement('tbody');\n  \n  const contextCount = settings.lineItemsContextCount;\n  const highlightFn = query ? getHighlightFunction(query, isMonetarySearch || false) : null;\n  \n  // Determine which items to show initially\n  let displayRanges: Array<{ start: number; end: number; isCollapsed?: boolean }> = [];\n  let hiddenItems: any[] = [];\n  \n  if (hasMatches && contextCount > 0) {\n    const matchingIndices = getMatchingLineItemIndices(item, query, isMonetarySearch);\n    \n    if (matchingIndices.length > 0) {\n      if (settings.collapseIrrelevantLineItems && matchingIndices.length > 1) {\n        // Use smart grouping logic\n        const groups = groupMatchingLineItems(matchingIndices, settings.lineItemsCollapseThreshold);\n        displayRanges = calculateDisplayRanges(groups, contextCount, items.length);\n        \n        // Calculate hidden items (items in collapsed ranges)\n        hiddenItems = [];\n        displayRanges.forEach(range => {\n          if (range.isCollapsed) {\n            for (let i = range.start; i <= range.end; i++) {\n              hiddenItems.push(items[i]);\n            }\n          }\n        });\n      } else {\n        // Original logic: show all items between first and last match\n        const minIndex = Math.min(...matchingIndices);\n        const maxIndex = Math.max(...matchingIndices);\n        \n        const startIndex = Math.max(0, minIndex - contextCount);\n        const endIndex = Math.min(items.length, maxIndex + contextCount + 1);\n        \n        displayRanges = [{ start: startIndex, end: endIndex - 1 }];\n        hiddenItems = [\n          ...items.slice(0, startIndex),\n          ...items.slice(endIndex)\n        ];\n      }\n    } else {\n      // Fallback: show first contextCount items\n      displayRanges = [{ start: 0, end: Math.min(contextCount - 1, items.length - 1) }];\n      hiddenItems = items.slice(contextCount);\n    }\n  } else {\n    // No matches or contextCount is 0: show all items\n    displayRanges = [{ start: 0, end: items.length - 1 }];\n    hiddenItems = [];\n  }\n  \n  // Track collapsed rows and their replacement content\n  const collapsedRows: HTMLTableRowElement[] = [];\n  const collapsedContent: HTMLTableRowElement[][] = [];\n\n  // Render items according to display ranges\n  displayRanges.forEach((range) => {\n    if (range.isCollapsed) {\n      // Add collapsed placeholder row\n      const collapsedRow = document.createElement('tr');\n      collapsedRow.className = 'line-item__collapsed';\n      const itemCount = range.end - range.start + 1;\n      collapsedRow.innerHTML = `\n        <td colspan=\"5\" class=\"line-item__collapsed-content\">\n          <span class=\"line-item__collapsed-text\">...</span>\n          <span class=\"line-item__collapsed-count\">${itemCount} items</span>\n        </td>\n      `;\n      tbody.append(collapsedRow);\n      collapsedRows.push(collapsedRow);\n      \n      // Create the actual content rows for this collapsed range\n      const contentRows: HTMLTableRowElement[] = [];\n      for (let i = range.start; i <= range.end; i++) {\n        const lineItemRow = renderLineItemRow(items[i], i);\n        lineItemRow.style.display = 'none'; // Initially hidden\n        tbody.append(lineItemRow);\n        contentRows.push(lineItemRow);\n      }\n      collapsedContent.push(contentRows);\n    } else {\n      // Add regular line item rows for this range\n      for (let i = range.start; i <= range.end; i++) {\n        const lineItemRow = renderLineItemRow(items[i], i);\n        tbody.append(lineItemRow);\n      }\n    }\n  });\n\n  // Add hidden items (initially hidden) if there are any\n  const hiddenRows: HTMLTableRowElement[] = [];\n  hiddenItems.forEach((line: any) => {\n    const lineItemRow = renderLineItemRow(line, 0); // index doesn't matter for hidden items\n    lineItemRow.style.display = 'none';\n    tbody.append(lineItemRow);\n    hiddenRows.push(lineItemRow);\n  });\n\n  table.append(tbody);\n  wrapper.append(table);\n\n  // Calculate total hidden count (collapsed content + hidden items)\n  const totalCollapsedCount = collapsedContent.reduce((sum, rows) => sum + rows.length, 0);\n  const totalHiddenCount = totalCollapsedCount + hiddenItems.length;\n\n  // Add single toggle button for all hidden content if there are any\n  if (totalHiddenCount > 0) {\n    const toggleButton = document.createElement('button');\n    toggleButton.className = 'line-items-toggle';\n    toggleButton.type = 'button';\n    toggleButton.textContent = `Show ${totalHiddenCount} more line item${totalHiddenCount === 1 ? '' : 's'}`;\n    \n    toggleButton.addEventListener('click', () => {\n      const isHidden = hiddenRows[0]?.style.display === 'none';\n      \n      if (isHidden) {\n        // Show all hidden content\n        // Hide collapsed placeholder rows\n        collapsedRows.forEach(row => {\n          row.style.display = 'none';\n        });\n        // Show collapsed content\n        collapsedContent.forEach(contentRows => {\n          contentRows.forEach(row => {\n            row.style.display = '';\n          });\n        });\n        // Show hidden items\n        hiddenRows.forEach(row => {\n          row.style.display = '';\n        });\n        toggleButton.textContent = `Hide ${totalHiddenCount} line item${totalHiddenCount === 1 ? '' : 's'}`;\n      } else {\n        // Hide all hidden content\n        // Show collapsed placeholder rows\n        collapsedRows.forEach(row => {\n          row.style.display = '';\n        });\n        // Hide collapsed content\n        collapsedContent.forEach(contentRows => {\n          contentRows.forEach(row => {\n            row.style.display = 'none';\n          });\n        });\n        // Hide hidden items\n        hiddenRows.forEach(row => {\n          row.style.display = 'none';\n        });\n        toggleButton.textContent = `Show ${totalHiddenCount} more line item${totalHiddenCount === 1 ? '' : 's'}`;\n      }\n    });\n    \n    wrapper.append(toggleButton);\n  }\n\n  return wrapper;\n}\n\nfunction getFieldLabel(field: string): string {\n  const labels: Record<string, string> = {\n    title: 'Title',\n    summary: 'Summary',\n    project: 'Project',\n    client: 'Client',\n    status: 'Status',\n    documentType: 'Document Type',\n    author: 'Author',\n    tags: 'Tags',\n  };\n\n  if (field.startsWith('lineItem') && field.includes('_')) {\n    const [, index, type] = field.split('_');\n    const typeLabels: Record<string, string> = {\n      title: 'Line Item Title',\n      description: 'Line Item Description',\n      type: 'Line Item Type',\n    };\n    return typeLabels[type] || 'Line Item';\n  }\n\n  if (field.startsWith('metadata_')) {\n    return 'Metadata';\n  }\n\n  return labels[field] || field;\n}\n", "import { settingsStore } from '../state/settingsStore';\nimport { formatEntityType } from '../utils/format';\nimport { SearchEntityType } from '../types';\n\nexport interface SettingsViewHandles {\n  element: HTMLElement;\n  render(): void;\n}\n\nexport function createSettingsView(): SettingsViewHandles {\n  const container = document.createElement('section');\n  container.className = 'settings-view';\n\n  const heading = document.createElement('header');\n  heading.innerHTML = `\n    <h1>Prototype Settings</h1>\n    <p>Adjust prototype behaviors. Changes save to the browser local storage and reload the experience.</p>\n  `;\n\n  const form = document.createElement('form');\n  form.className = 'settings-form';\n\n  // Overall Settings Section\n  const overallSection = document.createElement('fieldset');\n  overallSection.className = 'settings-group';\n  overallSection.innerHTML = `\n    <legend>Overall</legend>\n  `;\n\n  const delayField = document.createElement('div');\n  delayField.className = 'settings-field';\n  delayField.innerHTML = `\n    <label for=\"search-delay\">Simulated search delay (ms)</label>\n  `;\n\n  const delayInput = document.createElement('input');\n  delayInput.id = 'search-delay';\n  delayInput.type = 'number';\n  delayInput.min = '0';\n  delayInput.step = '10';\n\n  delayField.append(delayInput);\n  overallSection.append(delayField);\n\n  // Full Results Page Settings Section\n  const resultsSection = document.createElement('fieldset');\n  resultsSection.className = 'settings-group';\n  resultsSection.innerHTML = `\n    <legend>Full Results Page</legend>\n  `;\n\n  const lineItemsContextField = document.createElement('div');\n  lineItemsContextField.className = 'settings-field';\n  lineItemsContextField.innerHTML = `\n    <label for=\"line-items-context\">Line items context around matches</label>\n  `;\n\n  const lineItemsContextSelect = document.createElement('select');\n  lineItemsContextSelect.id = 'line-items-context';\n  lineItemsContextSelect.innerHTML = `\n    <option value=\"1\">1 before/after</option>\n    <option value=\"2\">2 before/after</option>\n    <option value=\"3\">3 before/after</option>\n    <option value=\"0\">All line items</option>\n  `;\n\n  lineItemsContextField.append(lineItemsContextSelect);\n  resultsSection.append(lineItemsContextField);\n\n  const showLineItemsField = document.createElement('div');\n  showLineItemsField.className = 'settings-field settings-field--checkbox';\n\n  const showLineItemsCheckbox = document.createElement('input');\n  showLineItemsCheckbox.id = 'show-line-items-default';\n  showLineItemsCheckbox.type = 'checkbox';\n\n  const showLineItemsLabel = document.createElement('label');\n  showLineItemsLabel.htmlFor = 'show-line-items-default';\n  showLineItemsLabel.textContent = 'Show line items by default (uncheck to collapse behind \"Show line items\" link)';\n\n  showLineItemsField.append(showLineItemsCheckbox, showLineItemsLabel);\n  resultsSection.append(showLineItemsField);\n\n  const collapseLineItemsField = document.createElement('div');\n  collapseLineItemsField.className = 'settings-field settings-field--checkbox';\n\n  const collapseLineItemsCheckbox = document.createElement('input');\n  collapseLineItemsCheckbox.id = 'collapse-irrelevant-line-items';\n  collapseLineItemsCheckbox.type = 'checkbox';\n\n  const collapseLineItemsLabel = document.createElement('label');\n  collapseLineItemsLabel.htmlFor = 'collapse-irrelevant-line-items';\n  collapseLineItemsLabel.textContent = 'Collapse irrelevant line items between results (shows \"...\" for large gaps between matches)';\n\n  collapseLineItemsField.append(collapseLineItemsCheckbox, collapseLineItemsLabel);\n  resultsSection.append(collapseLineItemsField);\n\n  const collapseThresholdField = document.createElement('div');\n  collapseThresholdField.className = 'settings-field';\n  collapseThresholdField.innerHTML = `\n    <label for=\"line-items-collapse-threshold\">Collapse threshold</label>\n  `;\n\n  const collapseThresholdSelect = document.createElement('select');\n  collapseThresholdSelect.id = 'line-items-collapse-threshold';\n  collapseThresholdSelect.innerHTML = `\n    <option value=\"3\">3 items</option>\n    <option value=\"5\">5 items</option>\n    <option value=\"7\">7 items</option>\n    <option value=\"10\">10 items</option>\n  `;\n\n  collapseThresholdField.append(collapseThresholdSelect);\n  resultsSection.append(collapseThresholdField);\n\n  const groupSection = document.createElement('fieldset');\n  groupSection.className = 'settings-group';\n  groupSection.innerHTML = `\n    <legend>Mini results group sizes</legend>\n  `;\n\n  const groupFields = document.createElement('div');\n  groupFields.className = 'settings-group__grid';\n  groupSection.append(groupFields);\n\n  const actions = document.createElement('div');\n  actions.className = 'settings-actions';\n\n  const saveButton = document.createElement('button');\n  saveButton.type = 'submit';\n  saveButton.className = 'primary';\n  saveButton.textContent = 'Save & Reload';\n\n  const resetButton = document.createElement('button');\n  resetButton.type = 'button';\n  resetButton.className = 'secondary';\n  resetButton.textContent = 'Restore defaults';\n\n  actions.append(saveButton, resetButton);\n\n  form.append(overallSection, resultsSection, groupSection, actions);\n  container.append(heading, form);\n\n  const groupInputs = new Map<string, HTMLInputElement>();\n\n  const renderGroupInputs = (groupLimits: Record<string, number>) => {\n    groupFields.innerHTML = '';\n    groupInputs.clear();\n\n    Object.entries(groupLimits).forEach(([key, value]) => {\n      const field = document.createElement('label');\n      field.className = 'settings-field';\n      field.htmlFor = `group-${key}`;\n\n      const title = document.createElement('span');\n      title.textContent = formatEntityType(key as SearchEntityType, { plural: true });\n\n      const input = document.createElement('input');\n      input.type = 'number';\n      input.min = '1';\n      input.step = '1';\n      input.id = `group-${key}`;\n      input.value = String(value);\n\n      field.append(title, input);\n      groupFields.append(field);\n      groupInputs.set(key, input);\n    });\n  };\n\n  const render = () => {\n    const state = settingsStore.getState();\n    delayInput.value = String(state.searchDelayMs);\n    lineItemsContextSelect.value = String(state.lineItemsContextCount);\n    showLineItemsCheckbox.checked = state.showLineItemsByDefault;\n    collapseLineItemsCheckbox.checked = state.collapseIrrelevantLineItems;\n    collapseThresholdSelect.value = String(state.lineItemsCollapseThreshold);\n    renderGroupInputs(state.groupLimits);\n  };\n\n  form.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    const nextDelay = Number.parseInt(delayInput.value, 10);\n    const resolvedDelay = Number.isFinite(nextDelay) && nextDelay >= 0 ? nextDelay : 0;\n\n    const lineItemsContext = Number.parseInt(lineItemsContextSelect.value, 10);\n    const resolvedLineItemsContext = Number.isFinite(lineItemsContext) && lineItemsContext >= 0 ? lineItemsContext : 3;\n\n    const collapseThreshold = Number.parseInt(collapseThresholdSelect.value, 10);\n    const resolvedCollapseThreshold = Number.isFinite(collapseThreshold) && collapseThreshold >= 0 ? collapseThreshold : 5;\n\n    const groupLimits: Record<string, number> = {};\n    groupInputs.forEach((input, key) => {\n      const parsed = Number.parseInt(input.value, 10);\n      groupLimits[key] = Number.isFinite(parsed) && parsed > 0 ? parsed : 1;\n    });\n\n    settingsStore.update({\n      searchDelayMs: resolvedDelay,\n      lineItemsContextCount: resolvedLineItemsContext,\n      showLineItemsByDefault: showLineItemsCheckbox.checked,\n      collapseIrrelevantLineItems: collapseLineItemsCheckbox.checked,\n      lineItemsCollapseThreshold: resolvedCollapseThreshold,\n      groupLimits,\n    });\n\n    window.location.reload();\n  });\n\n  resetButton.addEventListener('click', () => {\n    settingsStore.reset();\n    render();\n    window.location.reload();\n  });\n\n  render();\n\n  return {\n    element: container,\n    render,\n  };\n}\n", "import { FacetKey, FacetSelectionState, ScreenRoute, SearchResponse } from '../types';\nimport { createStore } from './store';\n\nexport type SearchStatus = 'idle' | 'loading' | 'ready' | 'error';\n\nexport interface AppState {\n  route: ScreenRoute;\n  searchQuery: string;\n  lastSubmittedQuery: string;\n  facetSelections: FacetSelectionState;\n  recentResponse: SearchResponse | null;\n  searchStatus: SearchStatus;\n  dialogOpen: boolean;\n  errorMessage?: string;\n}\n\nconst initialState: AppState = {\n  route: 'home',\n  searchQuery: '',\n  lastSubmittedQuery: '',\n  facetSelections: {},\n  recentResponse: null,\n  searchStatus: 'idle',\n  dialogOpen: false,\n  errorMessage: undefined,\n};\n\nfunction cloneSelections(selections: FacetSelectionState): FacetSelectionState {\n  const next: FacetSelectionState = {};\n  for (const key of Object.keys(selections) as FacetKey[]) {\n    const values = selections[key];\n    if (values && values.size > 0) {\n      next[key] = new Set(values);\n    }\n  }\n  return next;\n}\n\nconst store = createStore<AppState>(initialState);\n\nexport const appState = {\n  getState: store.getState,\n  subscribe: store.subscribe,\n  setRoute(route: ScreenRoute) {\n    store.setState({ route });\n  },\n  setSearchQuery(searchQuery: string) {\n    store.setState({ searchQuery });\n  },\n  setDialogOpen(dialogOpen: boolean) {\n    store.setState({ dialogOpen });\n  },\n  setStatus(status: SearchStatus, errorMessage?: string) {\n    store.setState({ searchStatus: status, errorMessage });\n  },\n  setResponse(response: SearchResponse | null) {\n    store.setState({ recentResponse: response });\n  },\n  setLastSubmittedQuery(query: string) {\n    store.setState({ lastSubmittedQuery: query });\n  },\n  clearFacets() {\n    store.setState({ facetSelections: {} });\n  },\n  toggleFacet(key: FacetKey, value: string) {\n    store.setState((prev) => {\n      const selections = cloneSelections(prev.facetSelections);\n      \n      // Special handling for groupBy facet - only one option can be selected at a time\n      if (key === 'groupBy') {\n        if (selections[key]?.has(value)) {\n          // If the same value is selected, deselect it\n          delete selections[key];\n        } else {\n          // Select the new value and clear any other groupBy selections\n          selections[key] = new Set([value]);\n        }\n      } else {\n        // Normal facet behavior - multiple selections allowed\n        const current = selections[key] ?? new Set<string>();\n\n        if (current.has(value)) {\n          current.delete(value);\n        } else {\n          current.add(value);\n        }\n\n        if (current.size === 0) {\n          delete selections[key];\n        } else {\n          selections[key] = current;\n        }\n      }\n\n      return {\n        ...prev,\n        facetSelections: selections,\n      };\n    });\n  },\n  replaceFacets(nextSelections: FacetSelectionState) {\n    const clone = cloneSelections(nextSelections);\n    store.setState({ facetSelections: clone });\n  },\n  reset() {\n    store.setState(initialState);\n  },\n};\n\nexport type AppStateStore = typeof appState;\n", "import {\n  DocumentRecord,\n  FacetKey,\n  FacetSelectionState,\n  FacetValue,\n  FinancialRecord,\n  OrganizationRecord,\n  PersonRecord,\n  SearchEntityType,\n  SearchGroup,\n  SearchOptions,\n  SearchRecord,\n  SearchResponse,\n  isFinancialRecord,\n  isOrganizationRecord,\n  isPersonRecord,\n} from '../types';\nimport { settingsStore } from '../state/settingsStore';\n\nconst GROUP_ORDER: SearchEntityType[] = [\n  'Document',\n  'Person',\n  'Organization',\n  'ClientInvoice',\n  'PurchaseOrder',\n  'Bill',\n  'Receipt',\n  'Payment',\n];\n\nconst FACET_KEYS: FacetKey[] = [\n  'entityType',\n  'project',\n  'status',\n  'documentType',\n  'client',\n  'issuedDate',\n  'totalValue',\n  'personType',\n  'contactOrganization',\n  'organizationType',\n  'tradeFocus',\n  'groupBy',\n];\n\n// Load corpus from multiple files\nlet CORPUS: SearchRecord[] = [];\n\nasync function loadCorpus(): Promise<SearchRecord[]> {\n  if (CORPUS.length > 0) {\n    return CORPUS; // Return cached corpus if already loaded\n  }\n\n  try {\n    // Load the index file to get metadata about the split files\n    const indexResponse = await fetch('./corpus-parts/index.json');\n    const indexData = await indexResponse.json();\n    \n    const allRecords: any[] = [];\n    \n    // Load each corpus part file\n    for (const fileInfo of indexData.files) {\n      const response = await fetch(`./corpus-parts/${fileInfo.filename}`);\n      const partData = await response.json();\n      allRecords.push(...partData);\n    }\n    \n    CORPUS = allRecords.map((record) => normalizeRecord(record));\n    return CORPUS;\n  } catch (error) {\n    console.error('Error loading corpus:', error);\n    // Fallback to empty corpus\n    CORPUS = [];\n    return CORPUS;\n  }\n}\n\nfunction normalizeRecord(record: any): SearchRecord {\n  // Clean up metadata to remove undefined values and ensure type safety\n  const cleanMetadata: Record<string, string | number | boolean | null> = {};\n  if (record.metadata) {\n    for (const [key, value] of Object.entries(record.metadata)) {\n      if (value !== undefined) {\n        cleanMetadata[key] = value as string | number | boolean | null;\n      }\n    }\n  }\n\n  const baseRecord = {\n    ...record,\n    tags: record.tags ?? [],\n    metadata: cleanMetadata,\n  };\n\n  switch (record.entityType as SearchEntityType) {\n    case 'Document':\n      return {\n        ...baseRecord,\n        entityType: 'Document',\n        documentType: record.documentType,\n        author: record.author,\n      } as DocumentRecord;\n    case 'Person':\n      return {\n        ...baseRecord,\n        entityType: 'Person',\n        personType: record.personType,\n        jobTitle: record.jobTitle,\n        associatedOrganization: record.associatedOrganization,\n        email: record.email,\n        phone: record.phone,\n        location: record.location,\n        tradeFocus: record.tradeFocus,\n      } as PersonRecord;\n    case 'Organization':\n      return {\n        ...baseRecord,\n        entityType: 'Organization',\n        organizationType: record.organizationType,\n        tradeFocus: record.tradeFocus,\n        serviceArea: record.serviceArea,\n        primaryContact: record.primaryContact,\n        phone: record.phone,\n        email: record.email,\n        website: record.website,\n      } as OrganizationRecord;\n    default:\n      return {\n        ...baseRecord,\n        entityType: record.entityType,\n        totalValue: record.totalValue,\n        issuedDate: record.issuedDate,\n        dueDate: record.dueDate,\n        lineItems: record.lineItems ?? [],\n      } as FinancialRecord;\n  }\n}\n\nfunction buildHaystack(record: SearchRecord): string {\n  const base = [\n    record.title,\n    record.summary,\n    record.project,\n    record.client,\n    record.status,\n    record.tags.join(' '),\n    ...Object.values(record.metadata ?? {}).map((value) => (value == null ? '' : String(value))),\n  ];\n\n  if (isFinancialRecord(record)) {\n    record.lineItems.forEach((item) => {\n      base.push(item.lineItemTitle, item.lineItemDescription, item.lineItemType);\n    });\n  } else if (isPersonRecord(record)) {\n    base.push(\n      record.personType,\n      record.jobTitle,\n      record.associatedOrganization ?? '',\n      record.email,\n      record.phone,\n      record.location,\n      record.tradeFocus ?? '',\n    );\n  } else if (isOrganizationRecord(record)) {\n    base.push(\n      record.organizationType,\n      record.tradeFocus,\n      record.serviceArea,\n      record.primaryContact,\n      record.phone,\n      record.email,\n      record.website ?? '',\n    );\n  }\n\n  return base\n    .filter((chunk) => Boolean(chunk))\n    .join(' ')\n    .toLowerCase();\n}\n\nfunction tokenize(query: string): string[] {\n  return query\n    .toLowerCase()\n    .split(/\\s+/)\n    .map((token) => token.trim())\n    .filter(Boolean);\n}\n\nfunction parseMonetaryQuery(query: string): { isMonetary: boolean; searchQuery: string; originalQuery: string } {\n  const trimmedQuery = query.trim();\n  \n  if (trimmedQuery.startsWith('$')) {\n    // Extract the amount part after the dollar sign\n    const amountPart = trimmedQuery.slice(1).trim();\n    return {\n      isMonetary: true,\n      searchQuery: amountPart,\n      originalQuery: query\n    };\n  }\n  \n  return {\n    isMonetary: false,\n    searchQuery: query,\n    originalQuery: query\n  };\n}\n\nfunction isNumericQuery(query: string): boolean {\n  const tokens = tokenize(query);\n  // Check if any token is purely numeric (could be a monetary amount)\n  return tokens.some(token => /^\\d+(\\.\\d+)?$/.test(token));\n}\n\nfunction hasMonetaryPotential(query: string): boolean {\n  const tokens = tokenize(query);\n  // Check if query contains numeric tokens that could match monetary values\n  return tokens.some(token => {\n    // Match pure numbers, numbers with commas, currency symbols, or alphanumeric with numbers\n    return /^\\d+(,\\d{3})*(\\.\\d+)?$/.test(token) || \n           /^\\d+(\\.\\d+)?$/.test(token) ||\n           /^\\$?\\d+(,\\d{3})*(\\.\\d+)?$/.test(token) ||\n           /\\d/.test(token); // Any token containing a digit\n  });\n}\n\nfunction normalizeMonetaryValue(value: number | string): string {\n  // Convert to number first to handle any string inputs\n  const num = typeof value === 'string' ? parseFloat(value) : value;\n  \n  // Handle NaN or invalid numbers\n  if (isNaN(num)) {\n    return '';\n  }\n  \n  // Normalize to remove trailing zeros and unnecessary decimal places\n  // e.g., 123.00 -> 123, 123.40 -> 123.4, 123.45 -> 123.45\n  return num.toString();\n}\n\nfunction parseCurrencyString(amountStr: string): number | null {\n  // Remove currency symbols, commas, and whitespace\n  const cleaned = amountStr.replace(/[$,\\s]/g, '');\n  \n  // Handle range queries (e.g., \"100-200\", \"100 to 200\")\n  if (cleaned.includes('-') || cleaned.toLowerCase().includes(' to ')) {\n    return null; // Will be handled separately\n  }\n  \n  const parsed = parseFloat(cleaned);\n  return isNaN(parsed) ? null : parsed;\n}\n\nfunction normalizeForComparison(value: number | string): string {\n  // Convert to string and remove commas and currency symbols for consistent comparison\n  const str = typeof value === 'string' ? value : value.toString();\n  return str.replace(/[,$]/g, '');\n}\n\nfunction matchesMonetaryString(queryStr: string, dataValue: number): boolean {\n  // Normalize both query and data value for comparison\n  const normalizedQuery = normalizeForComparison(queryStr);\n  const normalizedData = normalizeForComparison(dataValue.toString());\n  \n  // Check for exact string match (handles comma differences)\n  if (normalizedQuery === normalizedData) {\n    return true;\n  }\n  \n  // UX Principle: The more explicit the user input, the more restrictive we should be\n  // Analyze the specificity of the query to determine matching behavior\n  \n  const queryHasDecimal = queryStr.includes('.');\n  const queryDigitsAfterDecimal = queryHasDecimal ? queryStr.split('.')[1]?.length || 0 : 0;\n  const querySignificantDigits = normalizedQuery.length;\n  \n  // If user provided decimals (like $800.00), be very restrictive\n  if (queryHasDecimal) {\n    // For queries with explicit decimals, only match if:\n    // 1. Exact match (already handled above)\n    // 2. The data value starts with the same significant digits in the same positions\n    //    and the precision doesn't conflict\n    \n    // Convert data value to same precision as query for comparison\n    const dataAsDecimal = dataValue.toString();\n    const dataHasDecimal = dataAsDecimal.includes('.');\n    \n      if (queryDigitsAfterDecimal > 0) {\n        // User specified decimal places - be very precise\n        const queryWithoutTrailingZeros = normalizedQuery.replace(/0+$/, '');\n        const dataWithoutTrailingZeros = normalizedData.replace(/0+$/, '');\n        \n        // Only match if the significant digits align exactly\n        // For decimal queries, be very restrictive - only exact matches or where data is a prefix of query\n        return dataWithoutTrailingZeros === queryWithoutTrailingZeros ||\n               (dataWithoutTrailingZeros.length <= queryWithoutTrailingZeros.replace(/\\.$/, '').length && \n                queryWithoutTrailingZeros.replace(/\\.$/, '').startsWith(dataWithoutTrailingZeros));\n    } else {\n      // User typed something like \"$800.\" - match whole numbers starting with those digits\n      return normalizedData.startsWith(normalizedQuery);\n    }\n  }\n  \n  // For queries without decimals, apply progressive restriction based on specificity\n  if (querySignificantDigits >= 4) {\n    // 4+ digits (like \"8000\") - very restrictive, must start with exact digits\n    // For very long queries, be extremely restrictive - only allow exact matches or longer values that start with the query\n    if (normalizedData.length >= querySignificantDigits) {\n      return normalizedData.startsWith(normalizedQuery);\n    } else {\n      // Don't allow shorter values to match longer queries for 4+ digits\n      // This prevents \"6\" from matching \"696013456\"\n      return false;\n    }\n  } else if (querySignificantDigits >= 3) {\n    // 3 digits (like \"800\") - restrictive, must start with same 3 digits\n    if (normalizedData.length >= 3) {\n      return normalizedData.startsWith(normalizedQuery);\n    } else {\n      return normalizedQuery.startsWith(normalizedData);\n    }\n  } else if (querySignificantDigits >= 2) {\n    // 2 digits (like \"80\") - moderate restriction, must start with same 2 digits\n    if (normalizedData.length >= 2) {\n      return normalizedData.startsWith(normalizedQuery);\n    } else {\n      return normalizedQuery.startsWith(normalizedData);\n    }\n  } else {\n    // 1 digit (like \"8\") - most restrictive, only exact first digit match\n    // This is the \"first digit\" rule - only for single digit queries\n    return normalizedData[0] === normalizedQuery[0];\n  }\n}\n\nfunction isCloseMatch(value1: number, value2: number, tolerance: number = 0.01): boolean {\n  return Math.abs(value1 - value2) <= tolerance;\n}\n\nfunction parseRangeQuery(query: string): { min: number; max: number } | null {\n  // Handle various range formats: \"100-200\", \"100 to 200\", \"$100-$200\", \"$100 to $200\"\n  const rangePatterns = [\n    /(\\d+(?:\\.\\d+)?)\\s*-\\s*(\\d+(?:\\.\\d+)?)/,  // 100-200\n    /(\\d+(?:\\.\\d+)?)\\s+to\\s+(\\d+(?:\\.\\d+)?)/i, // 100 to 200\n    /\\$(\\d+(?:\\.\\d+)?)\\s*-\\s*\\$(\\d+(?:\\.\\d+)?)/, // $100-$200\n    /\\$(\\d+(?:\\.\\d+)?)\\s+to\\s+\\$(\\d+(?:\\.\\d+)?)/i, // $100 to $200\n  ];\n  \n  for (const pattern of rangePatterns) {\n    const match = query.match(pattern);\n    if (match) {\n      const min = parseFloat(match[1]);\n      const max = parseFloat(match[2]);\n      if (!isNaN(min) && !isNaN(max) && min <= max) {\n        return { min, max };\n      }\n    }\n  }\n  \n  return null;\n}\n\nfunction isInRange(value: number, range: { min: number; max: number }): boolean {\n  return value >= range.min && value <= range.max;\n}\n\nfunction extractMonetaryTokens(query: string): { amounts: number[]; textTokens: string[]; range: { min: number; max: number } | null } {\n  const tokens = tokenize(query);\n  const amounts: number[] = [];\n  const textTokens: string[] = [];\n  \n  // Check for range query first\n  const range = parseRangeQuery(query);\n  if (range) {\n    return { amounts, textTokens, range };\n  }\n  \n  for (const token of tokens) {\n    const parsed = parseCurrencyString(token);\n    if (parsed !== null) {\n      amounts.push(parsed);\n    } else {\n      textTokens.push(token);\n    }\n  }\n  \n  return { amounts, textTokens, range: null };\n}\n\nfunction matchesQuery(record: SearchRecord, query: string): boolean {\n  const tokens = tokenize(query);\n  if (tokens.length === 0) {\n    return true;\n  }\n\n  const haystack = buildHaystack(record);\n  return tokens.every((token) => haystack.includes(token));\n}\n\nfunction matchesHybridQuery(record: SearchRecord, query: string): boolean {\n  // First try regular text matching\n  const regularMatch = matchesQuery(record, query);\n  \n  // If regular match succeeds, return true\n  if (regularMatch) {\n    return true;\n  }\n  \n  // If no regular match and query has monetary potential, try monetary matching\n  if (hasMonetaryPotential(query)) {\n    return matchesMonetaryQuery(record, query);\n  }\n  \n  return false;\n}\n\nfunction matchesMonetaryQuery(record: SearchRecord, query: string): boolean {\n  const { amounts, textTokens, range } = extractMonetaryTokens(query);\n  \n  if (amounts.length === 0 && textTokens.length === 0 && !range) {\n    return true;\n  }\n\n  // For monetary searches, focus on financial records and their line items\n  if (!isFinancialRecord(record)) {\n    return false; // Skip non-financial records for monetary searches\n  }\n\n  const financialRecord = record;\n  \n  // Handle range queries\n  if (range) {\n    // Check if total value is in range\n    if (isInRange(financialRecord.totalValue, range)) {\n      return true;\n    }\n\n    // Check if any line item amounts are in range\n    for (const lineItem of financialRecord.lineItems) {\n      if (isInRange(lineItem.lineItemTotal, range) ||\n          isInRange(lineItem.lineItemUnitPrice, range)) {\n        return true;\n      }\n    }\n  }\n  \n  // Check if any monetary amounts match (exact or close)\n  if (amounts.length > 0) {\n    // Check total value\n    for (const queryAmount of amounts) {\n      if (isCloseMatch(financialRecord.totalValue, queryAmount)) {\n        return true;\n      }\n    }\n\n    // Check line items for amounts\n    for (const lineItem of financialRecord.lineItems) {\n      for (const queryAmount of amounts) {\n        if (isCloseMatch(lineItem.lineItemTotal, queryAmount) ||\n            isCloseMatch(lineItem.lineItemUnitPrice, queryAmount)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  // Check for string-based matches (handles comma differences)\n  const tokens = tokenize(query);\n  for (const token of tokens) {\n    // Check total value string match\n    if (matchesMonetaryString(token, financialRecord.totalValue)) {\n      return true;\n    }\n\n    // Check line items for string matches\n    for (const lineItem of financialRecord.lineItems) {\n      if (matchesMonetaryString(token, lineItem.lineItemTotal) ||\n          matchesMonetaryString(token, lineItem.lineItemUnitPrice)) {\n        return true;\n      }\n    }\n  }\n\n  // For explicit monetary searches (queries starting with $), be more restrictive\n  // Only match against monetary values, not descriptions or quantities\n  const isExplicitMonetary = query.trim().startsWith('$');\n  \n  if (isExplicitMonetary) {\n    // For explicit monetary searches, don't match against descriptions or quantities\n    // Only match against actual monetary values (totals, unit prices)\n    return false; // We've already checked all monetary values above\n  }\n\n  // For non-explicit monetary searches (like \"123\"), allow text token matching\n  // but still be more restrictive about what we match against\n  if (textTokens.length > 0) {\n    for (const lineItem of financialRecord.lineItems) {\n      // Only match against line item titles and types, not descriptions or quantities\n      const lineItemText = [\n        lineItem.lineItemTitle,\n        lineItem.lineItemType\n      ].join(' ').toLowerCase();\n\n      if (textTokens.every(token => lineItemText.includes(token))) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction matchesSelections(record: SearchRecord, selections?: FacetSelectionState): boolean {\n  if (!selections) {\n    return true;\n  }\n\n  for (const key of Object.keys(selections) as FacetKey[]) {\n    const values = selections[key];\n    if (!values || values.size === 0) {\n      continue;\n    }\n\n    const facetValue = getFacetValue(record, key);\n    if (!facetValue || !values.has(facetValue)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFacetValue(record: SearchRecord, key: FacetKey): string | undefined {\n  switch (key) {\n    case 'entityType':\n      return record.entityType;\n    case 'project':\n      return record.project;\n    case 'status':\n      return record.status;\n    case 'documentType':\n      return record.entityType === 'Document' ? record.documentType : undefined;\n    case 'client':\n      return record.client;\n    case 'issuedDate':\n      return record.entityType === 'Document' ? undefined : bucketIssuedDate((record as any).issuedDate);\n    case 'totalValue':\n      if (record.entityType === 'Document') {\n        return undefined;\n      }\n      return bucketTotal((record as any).totalValue);\n    case 'personType':\n      return isPersonRecord(record) ? record.personType : undefined;\n    case 'contactOrganization':\n      if (isPersonRecord(record)) {\n        return record.associatedOrganization ?? undefined;\n      }\n      if (isOrganizationRecord(record)) {\n        return record.title;\n      }\n      return undefined;\n    case 'organizationType':\n      return isOrganizationRecord(record) ? record.organizationType : undefined;\n    case 'tradeFocus': {\n      if (isPersonRecord(record) && record.tradeFocus) {\n        return record.tradeFocus;\n      }\n      if (isOrganizationRecord(record)) {\n        return record.tradeFocus;\n      }\n      const metadataTrade = record.metadata?.tradeFocus;\n      return typeof metadataTrade === 'string' ? metadataTrade : undefined;\n    }\n    case 'groupBy':\n      // This facet is handled specially - it's not a property of individual records\n      return undefined;\n    default:\n      return undefined;\n  }\n}\n\nfunction bucketTotal(total: number): string {\n  if (total < 10000) return '< $10k';\n  if (total < 50000) return '$10k\u2013$50k';\n  if (total < 100000) return '$50k\u2013$100k';\n  return '$100k+';\n}\n\nfunction bucketIssuedDate(dateString: string): string {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));\n  \n  if (diffInDays <= 7) return 'Last 7 days';\n  if (diffInDays <= 30) return 'Last 30 days';\n  if (diffInDays <= 90) return 'Last 3 months';\n  if (diffInDays <= 180) return 'Last 6 months';\n  if (diffInDays <= 365) return 'Last year';\n  if (diffInDays <= 730) return 'Last 2 years';\n  return 'Older than 2 years';\n}\n\nfunction computeFacets(records: SearchRecord[]): Partial<Record<FacetKey, FacetValue[]>> {\n  const facetMaps: Partial<Record<FacetKey, Map<string, number>>> = {};\n\n  for (const key of FACET_KEYS) {\n    if (key !== 'groupBy') {\n      facetMaps[key] = new Map<string, number>();\n    }\n  }\n\n  records.forEach((record) => {\n    for (const key of FACET_KEYS) {\n      if (key === 'groupBy') {\n        continue; // Skip groupBy as it's handled separately\n      }\n      \n      const value = getFacetValue(record, key);\n      if (!value) {\n        continue;\n      }\n\n      const map = facetMaps[key];\n      if (!map) {\n        continue;\n      }\n\n      map.set(value, (map.get(value) ?? 0) + 1);\n    }\n  });\n\n  const facets: Partial<Record<FacetKey, FacetValue[]>> = {};\n\n  for (const key of FACET_KEYS) {\n    if (key === 'groupBy') {\n      // Add special groupBy facet options\n      facets[key] = [\n        { key: 'groupBy', value: 'None', count: records.length },\n        { key: 'groupBy', value: 'Type', count: records.length },\n        { key: 'groupBy', value: 'Project', count: records.length },\n        { key: 'groupBy', value: 'Status', count: records.length },\n        { key: 'groupBy', value: 'Client', count: records.length },\n      ];\n      continue;\n    }\n    \n    const map = facetMaps[key];\n    if (!map || map.size === 0) {\n      continue;\n    }\n\n    const values = Array.from(map.entries())\n      .map(([value, count]) => ({ key, value, count }))\n      .sort((a, b) => b.count - a.count || a.value.localeCompare(b.value));\n\n    facets[key] = values;\n  }\n\n  return facets;\n}\n\nfunction calculateRelevanceScore(record: SearchRecord, query: string): number {\n  const tokens = tokenize(query);\n  if (tokens.length === 0) {\n    return 0;\n  }\n\n  const haystack = buildHaystack(record);\n  const titleLower = record.title.toLowerCase();\n  const summaryLower = record.summary.toLowerCase();\n  \n  let score = 0;\n  \n  // Exact title match (highest priority)\n  if (titleLower.includes(query.toLowerCase())) {\n    score += 100;\n  }\n  \n  // Title word matches\n  const titleMatches = tokens.filter(token => titleLower.includes(token)).length;\n  score += titleMatches * 20;\n  \n  // Summary matches\n  const summaryMatches = tokens.filter(token => summaryLower.includes(token)).length;\n  score += summaryMatches * 10;\n  \n  // Content matches (haystack)\n  const contentMatches = tokens.filter(token => haystack.includes(token)).length;\n  score += contentMatches * 5;\n  \n  // Bonus for exact phrase matches in title\n  if (titleLower.includes(query.toLowerCase())) {\n    score += 50;\n  }\n  \n  // Bonus for exact phrase matches in summary\n  if (summaryLower.includes(query.toLowerCase())) {\n    score += 25;\n  }\n  \n  return score;\n}\n\nfunction calculateHybridRelevanceScore(record: SearchRecord, query: string): number {\n  // First calculate regular relevance score\n  const regularScore = calculateRelevanceScore(record, query);\n  \n  // If regular score is high enough, use it\n  if (regularScore > 0) {\n    return regularScore;\n  }\n  \n  // If no regular match and query has monetary potential, try monetary scoring\n  if (hasMonetaryPotential(query)) {\n    return calculateMonetaryRelevanceScore(record, query);\n  }\n  \n  return 0;\n}\n\nfunction calculateMonetaryRelevanceScore(record: SearchRecord, query: string): number {\n  const { amounts, textTokens, range } = extractMonetaryTokens(query);\n  \n  if (amounts.length === 0 && textTokens.length === 0 && !range) {\n    return 0;\n  }\n\n  if (!isFinancialRecord(record)) {\n    return 0; // Skip non-financial records for monetary searches\n  }\n\n  const financialRecord = record;\n  let score = 0;\n  \n  // Handle range queries\n  if (range) {\n    // Check total value range matches\n    if (isInRange(financialRecord.totalValue, range)) {\n      // Score based on how close to the center of the range\n      const rangeCenter = (range.min + range.max) / 2;\n      const distanceFromCenter = Math.abs(financialRecord.totalValue - rangeCenter);\n      const rangeSize = range.max - range.min;\n      const normalizedDistance = Math.min(distanceFromCenter / rangeSize, 1);\n      score += Math.round(800 * (1 - normalizedDistance)); // 800 points max, decreasing with distance\n    }\n    \n    // Check line items for range matches\n    for (const lineItem of financialRecord.lineItems) {\n      if (isInRange(lineItem.lineItemTotal, range)) {\n        const rangeCenter = (range.min + range.max) / 2;\n        const distanceFromCenter = Math.abs(lineItem.lineItemTotal - rangeCenter);\n        const rangeSize = range.max - range.min;\n        const normalizedDistance = Math.min(distanceFromCenter / rangeSize, 1);\n        score += Math.round(700 * (1 - normalizedDistance));\n      }\n      \n      if (isInRange(lineItem.lineItemUnitPrice, range)) {\n        const rangeCenter = (range.min + range.max) / 2;\n        const distanceFromCenter = Math.abs(lineItem.lineItemUnitPrice - rangeCenter);\n        const rangeSize = range.max - range.min;\n        const normalizedDistance = Math.min(distanceFromCenter / rangeSize, 1);\n        score += Math.round(600 * (1 - normalizedDistance));\n      }\n    }\n  }\n  \n  // Check monetary amounts for exact and close matches\n  if (amounts.length > 0) {\n    // Check total value matches\n    for (const queryAmount of amounts) {\n      const totalValue = financialRecord.totalValue;\n      \n      if (totalValue === queryAmount) {\n        score += 1000; // Exact total value match\n      } else if (isCloseMatch(totalValue, queryAmount, 0.01)) {\n        score += 800; // Very close total value match\n      } else if (isCloseMatch(totalValue, queryAmount, 1.00)) {\n        score += 600; // Close total value match\n      }\n    }\n    \n    // Check line items for exact and close amount matches\n    for (const lineItem of financialRecord.lineItems) {\n      for (const queryAmount of amounts) {\n        // Line item total matches\n        if (lineItem.lineItemTotal === queryAmount) {\n          score += 900; // Exact line item total match\n        } else if (isCloseMatch(lineItem.lineItemTotal, queryAmount, 0.01)) {\n          score += 700; // Very close line item total match\n        } else if (isCloseMatch(lineItem.lineItemTotal, queryAmount, 1.00)) {\n          score += 500; // Close line item total match\n        }\n        \n        // Unit price matches\n        if (lineItem.lineItemUnitPrice === queryAmount) {\n          score += 800; // Exact unit price match\n        } else if (isCloseMatch(lineItem.lineItemUnitPrice, queryAmount, 0.01)) {\n          score += 600; // Very close unit price match\n        } else if (isCloseMatch(lineItem.lineItemUnitPrice, queryAmount, 1.00)) {\n          score += 400; // Close unit price match\n        }\n        \n      }\n    }\n  }\n  \n  // Check for string-based matches (handles comma differences)\n  const tokens = tokenize(query);\n  for (const token of tokens) {\n    // Check total value string match\n    if (matchesMonetaryString(token, financialRecord.totalValue)) {\n      score += 750; // High score for string-based total value match\n    }\n\n    // Check line items for string matches\n    for (const lineItem of financialRecord.lineItems) {\n      if (matchesMonetaryString(token, lineItem.lineItemTotal)) {\n        score += 650; // High score for string-based line item total match\n      }\n      if (matchesMonetaryString(token, lineItem.lineItemUnitPrice)) {\n        score += 550; // Good score for string-based unit price match\n      }\n    }\n  }\n\n  // For explicit monetary searches (queries starting with $), be more restrictive\n  // Only score against monetary values, not descriptions or quantities\n  const isExplicitMonetary = query.trim().startsWith('$');\n  \n  if (!isExplicitMonetary && textTokens.length > 0) {\n    // For non-explicit monetary searches (like \"123\"), allow text token matching\n    // but still be more restrictive about what we match against\n    for (const lineItem of financialRecord.lineItems) {\n      // Only match against line item titles and types, not descriptions or quantities\n      const lineItemText = [\n        lineItem.lineItemTitle,\n        lineItem.lineItemType\n      ].join(' ').toLowerCase();\n      \n      const lineItemMatches = textTokens.filter(token => lineItemText.includes(token)).length;\n      score += lineItemMatches * 50;\n    }\n    \n    // Small bonus for title/summary matches in financial records\n    const titleLower = record.title.toLowerCase();\n    const summaryLower = record.summary.toLowerCase();\n    \n    const titleMatches = textTokens.filter(token => titleLower.includes(token)).length;\n    score += titleMatches * 10;\n    \n    const summaryMatches = textTokens.filter(token => summaryLower.includes(token)).length;\n    score += summaryMatches * 5;\n  }\n  \n  return score;\n}\n\nfunction sortByRelevance(records: SearchRecord[], query: string, isMonetary: boolean = false): SearchRecord[] {\n  return [...records].sort((a, b) => {\n    let scoreA: number;\n    let scoreB: number;\n    \n    if (isMonetary) {\n      // Explicit monetary search (query starts with $)\n      scoreA = calculateMonetaryRelevanceScore(a, query);\n      scoreB = calculateMonetaryRelevanceScore(b, query);\n    } else if (hasMonetaryPotential(query)) {\n      // Hybrid scoring for queries with numeric potential (like \"123\")\n      scoreA = calculateHybridRelevanceScore(a, query);\n      scoreB = calculateHybridRelevanceScore(b, query);\n    } else {\n      // Regular scoring for non-numeric queries\n      scoreA = calculateRelevanceScore(a, query);\n      scoreB = calculateRelevanceScore(b, query);\n    }\n    \n    // Primary sort by relevance score (descending)\n    if (scoreA !== scoreB) {\n      return scoreB - scoreA;\n    }\n    \n    // Secondary sort by recency (descending) as tiebreaker\n    return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n  });\n}\n\nfunction sortByRecency(records: SearchRecord[]): SearchRecord[] {\n  return [...records].sort(\n    (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime(),\n  );\n}\n\nasync function filterRecords({ query, selections, isMonetarySearch }: SearchOptions): Promise<SearchRecord[]> {\n  const { isMonetary, searchQuery } = parseMonetaryQuery(query);\n  \n  const corpus = await loadCorpus();\n  const filtered = corpus.filter((record) => {\n    let matchesQueryResult: boolean;\n    \n    if (isMonetary) {\n      // Explicit monetary search (query starts with $)\n      matchesQueryResult = matchesMonetaryQuery(record, searchQuery);\n    } else if (hasMonetaryPotential(searchQuery)) {\n      // Hybrid search for queries with numeric potential (like \"123\")\n      matchesQueryResult = matchesHybridQuery(record, searchQuery);\n    } else {\n      // Regular text search for non-numeric queries\n      matchesQueryResult = matchesQuery(record, searchQuery);\n    }\n    \n    return matchesQueryResult && matchesSelections(record, selections);\n  });\n  \n  // Use relevance-based sorting for non-empty queries, recency for empty queries\n  return searchQuery.trim() ? sortByRelevance(filtered, searchQuery, isMonetary) : sortByRecency(filtered);\n}\n\nfunction determineGroupEntityType(records: SearchRecord[]): SearchEntityType {\n  if (records.length === 0) {\n    return 'Document';\n  }\n  \n  // If all records have the same entity type, use that\n  const firstType = records[0].entityType;\n  if (records.every(record => record.entityType === firstType)) {\n    return firstType;\n  }\n  \n  // If records are mixed types, use the most common type\n  const typeCounts = new Map<SearchEntityType, number>();\n  records.forEach(record => {\n    typeCounts.set(record.entityType, (typeCounts.get(record.entityType) || 0) + 1);\n  });\n  \n  let mostCommonType: SearchEntityType = 'Document';\n  let maxCount = 0;\n  \n  for (const [type, count] of typeCounts.entries()) {\n    if (count > maxCount) {\n      maxCount = count;\n      mostCommonType = type;\n    }\n  }\n  \n  return mostCommonType;\n}\n\nfunction buildGroups(records: SearchRecord[], groupBy?: string): SearchGroup[] {\n  if (!groupBy || groupBy === 'None') {\n    // When not grouping, create separate groups for each entity type\n    // This allows us to apply individual limits to each type\n    const typeGroups = new Map<SearchEntityType, SearchRecord[]>();\n    \n    records.forEach((record) => {\n      if (!typeGroups.has(record.entityType)) {\n        typeGroups.set(record.entityType, []);\n      }\n      typeGroups.get(record.entityType)!.push(record);\n    });\n    \n    // Convert to SearchGroup array, sorted by entity type\n    return Array.from(typeGroups.entries())\n      .sort((a, b) => {\n        const orderA = GROUP_ORDER.indexOf(a[0]);\n        const orderB = GROUP_ORDER.indexOf(b[0]);\n        if (orderA !== -1 || orderB !== -1) {\n          const safeOrderA = orderA === -1 ? Number.MAX_SAFE_INTEGER : orderA;\n          const safeOrderB = orderB === -1 ? Number.MAX_SAFE_INTEGER : orderB;\n          if (safeOrderA !== safeOrderB) {\n            return safeOrderA - safeOrderB;\n          }\n        }\n        return a[0].localeCompare(b[0]);\n      })\n      .map(([entityType, items]) => ({\n        entityType,\n        items,\n        groupTitle: entityType,\n      }));\n  }\n\n  const map = new Map<string, SearchRecord[]>();\n\n  records.forEach((record) => {\n    let groupKey: string;\n    \n    switch (groupBy) {\n      case 'Type':\n        groupKey = record.entityType;\n        break;\n      case 'Project':\n        groupKey = record.project;\n        break;\n      case 'Status':\n        groupKey = record.status;\n        break;\n      case 'Client':\n        groupKey = record.client;\n        break;\n      default:\n        groupKey = record.entityType;\n    }\n\n    if (!map.has(groupKey)) {\n      map.set(groupKey, []);\n    }\n    map.get(groupKey)!.push(record);\n  });\n\n  // Sort groups by key name for consistent ordering\n  const sortedEntries = Array.from(map.entries()).sort((a, b) => {\n    if (groupBy === 'Type') {\n      const orderA = GROUP_ORDER.indexOf(a[0] as SearchEntityType);\n      const orderB = GROUP_ORDER.indexOf(b[0] as SearchEntityType);\n      if (orderA !== -1 || orderB !== -1) {\n        const safeOrderA = orderA === -1 ? Number.MAX_SAFE_INTEGER : orderA;\n        const safeOrderB = orderB === -1 ? Number.MAX_SAFE_INTEGER : orderB;\n        if (safeOrderA !== safeOrderB) {\n          return safeOrderA - safeOrderB;\n        }\n      }\n    }\n    return a[0].localeCompare(b[0]);\n  });\n\n  return sortedEntries.map(([groupKey, items]) => ({\n    entityType: groupBy === 'Type' ? groupKey as SearchEntityType : determineGroupEntityType(items),\n    items,\n    groupTitle: groupKey,\n  })).filter((group) => group.items.length > 0);\n}\n\nfunction applyGroupLimits(groups: SearchGroup[], limits: Record<string, number>): SearchGroup[] {\n  return groups\n    .map((group) => {\n      const limit = limits[group.entityType] ?? limits['Document'] ?? 4;\n      return {\n        entityType: group.entityType,\n        items: group.items.slice(0, Math.max(0, limit)),\n      } satisfies SearchGroup;\n    })\n    .filter((group) => group.items.length > 0);\n}\n\nfunction wait(ms: number): Promise<void> {\n  return new Promise((resolve) => {\n    if (ms <= 0) {\n      resolve();\n      return;\n    }\n    globalThis.setTimeout(resolve, ms);\n  });\n}\n\nexport async function runSearch(\n  options: SearchOptions,\n  overrides?: {\n    delayMs?: number;\n    groupLimits?: Record<string, number>;\n  },\n): Promise<SearchResponse> {\n  const settings = settingsStore.getState();\n  const delay = overrides?.delayMs ?? settings.searchDelayMs;\n  const groupLimits = overrides?.groupLimits ?? settings.groupLimits;\n\n  const { isMonetary } = parseMonetaryQuery(options.query);\n  const searchOptions = { ...options, isMonetarySearch: isMonetary };\n  \n  const records = await filterRecords(searchOptions);\n  const facets = computeFacets(records);\n  \n  // Determine grouping option from selections\n  const groupBy = options.selections?.groupBy?.values().next().value;\n  const isGrouped = groupBy && groupBy !== 'None';\n  \n  const fullGroups = buildGroups(records, groupBy);\n  const limitedGroups = applyGroupLimits(fullGroups, groupLimits);\n\n  // Reduce delay for better responsiveness, especially for short queries\n  const effectiveDelay = options.query.trim().length < 3 ? Math.min(delay, 50) : delay;\n  await wait(effectiveDelay);\n\n  return {\n    query: options.query,\n    totalResults: records.length,\n    limitedGroups,\n    fullGroups,\n    facets,\n    records,\n    isGrouped: !!isGrouped,\n  };\n}\n\nexport async function getCorpus(): Promise<SearchRecord[]> {\n  const corpus = await loadCorpus();\n  return [...corpus];\n}\n", "import './tokens.css';\nimport './styles.css';\nimport { createHeader } from './components/header';\nimport { createSearchDialog } from './components/searchDialog';\nimport { createResultsView } from './components/resultsView';\nimport { createSettingsView } from './components/settingsView';\nimport { appState, AppState } from './state/appState';\nimport { runSearch } from './data/searchService';\nimport { ScreenRoute } from './types';\nimport { getEffectiveQueryLength, MIN_EFFECTIVE_QUERY_LENGTH } from './utils/query';\n\nfunction isMonetaryQuery(query: string): boolean {\n  return query.trim().startsWith('$');\n}\n\nconst root = document.querySelector<HTMLDivElement>('#app');\nif (!root) {\n  throw new Error('Root container #app not found');\n}\n\nconst main = document.createElement('main');\nmain.className = 'app-main';\n\nlet activeSearchToken = 0;\nlet searchDebounceTimer: number | null = null;\n\n// Debounce search operations to reduce UI blocking\nfunction debouncedSearch(value: string, options: { openDialog?: boolean; updateSubmitted?: boolean }) {\n  if (searchDebounceTimer) {\n    clearTimeout(searchDebounceTimer);\n  }\n  \n  // For very short queries, search immediately to provide instant feedback\n  const effectiveLength = getEffectiveQueryLength(value.trim());\n  const delay = effectiveLength < 2 ? 0 : 150; // 150ms debounce for longer queries\n  \n  searchDebounceTimer = window.setTimeout(() => {\n    void performSearch(value, options);\n    searchDebounceTimer = null;\n  }, delay);\n}\n\nconst header = createHeader({\n  onNavigate: (route) => navigate(route),\n  onHome: () => {\n    // Reset search state but keep settings\n    appState.setSearchQuery('');\n    appState.setLastSubmittedQuery('');\n    appState.setResponse(null);\n    appState.setStatus('idle');\n    appState.setDialogOpen(false);\n    appState.clearFacets();\n    navigate('home');\n  },\n  onSearchChange: (value) => {\n    const currentState = appState.getState();\n    const previousQuery = currentState.lastSubmittedQuery || currentState.searchQuery;\n    \n    // Clear filters if the search query has changed from the last submitted query\n    if (value.trim() !== previousQuery.trim()) {\n      appState.clearFacets();\n    }\n    \n    // Update search query immediately for responsive UI\n    appState.setSearchQuery(value);\n    \n    // Set monetary search mode based on query\n    header.setMonetarySearchMode(isMonetaryQuery(value));\n    \n    const isHome = appState.getState().route === 'home';\n    debouncedSearch(value, { openDialog: isHome, updateSubmitted: !isHome });\n  },\n  onSearchSubmit: () => {\n    navigate('results');\n    void performSearch(appState.getState().searchQuery, { openDialog: false });\n  },\n  onSearchFocus: () => {\n    if (appState.getState().route !== 'home') {\n      return;\n    }\n    // Use requestAnimationFrame to defer heavy operations and keep UI responsive\n    requestAnimationFrame(() => {\n      appState.setDialogOpen(true);\n      const query = appState.getState().searchQuery;\n      if (query.trim()) {\n        // Use debounced search for focus events too\n        debouncedSearch(query, { openDialog: true, updateSubmitted: false });\n      }\n    });\n  },\n  onSearchBlur: () => {\n    // Defer closing to outside-click + escape handlers.\n  },\n  onSearchKeyDown: (event) => {\n    if (event.key === 'Escape') {\n      appState.setDialogOpen(false);\n      header.searchInput.blur();\n    }\n  },\n});\n\nconst searchDialog = createSearchDialog(header.dialogHost, {\n  onSeeAllResults: () => {\n    navigate('results');\n    void performSearch(appState.getState().searchQuery, { openDialog: false });\n  },\n});\n\n// Initialize dialog as hidden\nsearchDialog.setState({\n  visible: false,\n  status: appState.getState().searchStatus,\n  query: appState.getState().searchQuery,\n  response: appState.getState().recentResponse,\n});\n\nconst resultsView = createResultsView({\n  onFacetToggle: (key, value) => {\n    appState.toggleFacet(key, value);\n    const query = (appState.getState().lastSubmittedQuery || appState.getState().searchQuery).trim();\n    if (query) {\n      void performSearch(query, { openDialog: false });\n    }\n  },\n  onClearFacets: () => {\n    appState.clearFacets();\n    const query = (appState.getState().lastSubmittedQuery || appState.getState().searchQuery).trim();\n    if (query) {\n      void performSearch(query, { openDialog: false });\n    }\n  },\n});\n\nconst settingsView = createSettingsView();\n\nconst homeScreen = document.createElement('section');\nhomeScreen.id = 'screen-home';\nhomeScreen.dataset.screen = 'home';\nhomeScreen.className = 'screen screen--home';\nhomeScreen.innerHTML = `\n  <div class=\"home-ghost\">\n    <h1>Global search prototype</h1>\n    <p>This area stands in for future homepage content. Use the search bar above to open the quick results dialog.</p>\n  </div>\n`;\n\nconst resultsScreen = document.createElement('section');\nresultsScreen.id = 'screen-results';\nresultsScreen.dataset.screen = 'results';\nresultsScreen.className = 'screen screen--results';\nresultsScreen.append(resultsView.element);\n\nconst settingsScreen = document.createElement('section');\nsettingsScreen.id = 'screen-settings';\nsettingsScreen.dataset.screen = 'settings';\nsettingsScreen.className = 'screen screen--settings';\nsettingsScreen.append(settingsView.element);\n\nmain.append(homeScreen, resultsScreen, settingsScreen);\nroot.append(header.element, main);\n\nconst screens: Record<ScreenRoute, HTMLElement> = {\n  home: homeScreen,\n  results: resultsScreen,\n  settings: settingsScreen,\n};\n\nfunction navigate(route: ScreenRoute) {\n  const previousRoute = appState.getState().route;\n  appState.setRoute(route);\n\n  if (route !== 'home') {\n    appState.setDialogOpen(false);\n  }\n\n  if (route === 'results') {\n    const query = (appState.getState().lastSubmittedQuery || appState.getState().searchQuery).trim();\n    if (query && previousRoute !== 'results') {\n      void performSearch(query, { openDialog: false });\n    }\n  }\n}\n\nasync function performSearch(\n  query: string,\n  options: { openDialog?: boolean; updateSubmitted?: boolean } = {},\n): Promise<void> {\n  const { openDialog = false, updateSubmitted = true } = options;\n  const trimmed = query.trim();\n  const effectiveLength = getEffectiveQueryLength(trimmed);\n\n  if (openDialog && appState.getState().route === 'home') {\n    appState.setDialogOpen(true);\n  }\n\n  if (effectiveLength === 0) {\n    activeSearchToken += 1;\n    if (updateSubmitted) {\n      appState.setLastSubmittedQuery('');\n    }\n    appState.setStatus('idle');\n    appState.setResponse(null);\n    return;\n  }\n\n  if (effectiveLength < MIN_EFFECTIVE_QUERY_LENGTH) {\n    activeSearchToken += 1;\n    if (updateSubmitted) {\n      appState.setLastSubmittedQuery('');\n    }\n    appState.setStatus('idle');\n    appState.setResponse(null);\n    return;\n  }\n\n  const requestId = ++activeSearchToken;\n  appState.setStatus('loading');\n\n  try {\n    const response = await runSearch({\n      query: trimmed,\n      selections: appState.getState().facetSelections,\n    });\n\n    if (requestId !== activeSearchToken) {\n      return;\n    }\n\n    appState.setResponse(response);\n    appState.setStatus('ready');\n\n    if (updateSubmitted) {\n      appState.setLastSubmittedQuery(trimmed);\n    }\n\n    if (openDialog && appState.getState().route === 'home') {\n      appState.setDialogOpen(true);\n    }\n  } catch (error) {\n    if (requestId !== activeSearchToken) {\n      return;\n    }\n\n    console.error('Search failed', error);\n    appState.setStatus('error', 'Unable to complete search. Try again.');\n  }\n}\n\nfunction focusSearchBar() {\n  header.searchInput.focus();\n  header.searchInput.select();\n  const isHome = appState.getState().route === 'home';\n  if (isHome) {\n    appState.setDialogOpen(true);\n    const query = appState.getState().searchQuery;\n    if (query.trim()) {\n      void performSearch(query, { openDialog: true, updateSubmitted: false });\n    }\n  } else {\n    appState.setDialogOpen(false);\n  }\n}\n\nfunction handleGlobalKeydown(event: KeyboardEvent) {\n  const target = event.target as HTMLElement | null;\n  const isEditable =\n    target &&\n    (target.tagName === 'INPUT' ||\n      target.tagName === 'TEXTAREA' ||\n      target.isContentEditable);\n\n  if (event.key === '/' && !event.metaKey && !event.ctrlKey && !event.altKey && !isEditable) {\n    event.preventDefault();\n    focusSearchBar();\n    return;\n  }\n\n  if ((event.metaKey || event.ctrlKey) && event.key.toLowerCase() === 'k') {\n    event.preventDefault();\n    focusSearchBar();\n    return;\n  }\n\n  if (event.key === 'Escape' && appState.getState().dialogOpen) {\n    appState.setDialogOpen(false);\n    header.searchInput.blur();\n  }\n}\n\nfunction handleDocumentClick(event: MouseEvent) {\n  if (!appState.getState().dialogOpen) {\n    return;\n  }\n\n  const target = event.target as Node | null;\n  if (target && header.element.contains(target)) {\n    return;\n  }\n\n  appState.setDialogOpen(false);\n}\n\n// Track previous state to avoid unnecessary re-renders\nlet previousState: AppState | null = null;\n\nappState.subscribe((state) => {\n  // Only update route visibility if route changed\n  if (!previousState || previousState.route !== state.route) {\n    Object.entries(screens).forEach(([route, element]) => {\n      element.hidden = route !== state.route;\n    });\n  }\n\n  // Only update search input if query changed\n  if (!previousState || previousState.searchQuery !== state.searchQuery) {\n    header.searchInput.value = state.searchQuery;\n  }\n\n  // Only update active route if route changed\n  if (!previousState || previousState.route !== state.route) {\n    header.setActiveRoute(state.route);\n  }\n\n  // Only update search dialog if relevant state changed\n  const dialogStateChanged = !previousState || \n    previousState.dialogOpen !== state.dialogOpen ||\n    previousState.route !== state.route ||\n    previousState.searchStatus !== state.searchStatus ||\n    previousState.searchQuery !== state.searchQuery ||\n    previousState.recentResponse !== state.recentResponse;\n\n  if (dialogStateChanged) {\n    searchDialog.setState({\n      visible: state.dialogOpen && state.route === 'home',\n      status: state.searchStatus,\n      query: state.searchQuery,\n      response: state.recentResponse,\n      isMonetarySearch: isMonetaryQuery(state.searchQuery),\n    });\n  }\n\n  // Only update results view if relevant state changed\n  const resultsStateChanged = !previousState ||\n    previousState.recentResponse !== state.recentResponse ||\n    previousState.facetSelections !== state.facetSelections ||\n    previousState.searchStatus !== state.searchStatus ||\n    previousState.lastSubmittedQuery !== state.lastSubmittedQuery ||\n    previousState.searchQuery !== state.searchQuery ||\n    previousState.errorMessage !== state.errorMessage;\n\n  if (resultsStateChanged) {\n    resultsView.render({\n      response: state.recentResponse,\n      selections: state.facetSelections,\n      status: state.searchStatus,\n      query: state.lastSubmittedQuery || state.searchQuery,\n      errorMessage: state.errorMessage,\n      isMonetarySearch: isMonetaryQuery(state.lastSubmittedQuery || state.searchQuery),\n    });\n  }\n\n  previousState = state;\n});\n\ndocument.addEventListener('keydown', handleGlobalKeydown);\ndocument.addEventListener('mousedown', handleDocumentClick);\n\n// Initial render\nappState.setRoute('home');\n"],
  "mappings": "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",
  "names": ["header", "previousState", "escapeHtml", "initialState", "hasMonetaryPotential", "getHighlightFunction", "header", "renderGroup", "highlightFn", "table", "thead", "headerRow", "tbody", "initialState", "store", "hasMonetaryPotential", "parseCurrencyString", "parseRangeQuery", "extractMonetaryTokens", "hasMonetaryPotential"]
}
